# coding: utf-8

"""
    MarketSharp CRM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class AddressResourceModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'address_line_one': 'str',
        'address_line_two': 'str',
        'city': 'str',
        'state': 'str',
        'zip': 'str'
    }

    attribute_map = {
        'address_line_one': 'addressLineOne',
        'address_line_two': 'addressLineTwo',
        'city': 'city',
        'state': 'state',
        'zip': 'zip'
    }

    def __init__(self, address_line_one=None, address_line_two=None, city=None, state=None, zip=None, local_vars_configuration=None):  # noqa: E501
        """AddressResourceModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._address_line_one = None
        self._address_line_two = None
        self._city = None
        self._state = None
        self._zip = None
        self.discriminator = None

        if address_line_one is not None:
            self.address_line_one = address_line_one
        if address_line_two is not None:
            self.address_line_two = address_line_two
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        if zip is not None:
            self.zip = zip

    @property
    def address_line_one(self):
        """Gets the address_line_one of this AddressResourceModel.  # noqa: E501


        :return: The address_line_one of this AddressResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._address_line_one

    @address_line_one.setter
    def address_line_one(self, address_line_one):
        """Sets the address_line_one of this AddressResourceModel.


        :param address_line_one: The address_line_one of this AddressResourceModel.  # noqa: E501
        :type: str
        """

        self._address_line_one = address_line_one

    @property
    def address_line_two(self):
        """Gets the address_line_two of this AddressResourceModel.  # noqa: E501


        :return: The address_line_two of this AddressResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._address_line_two

    @address_line_two.setter
    def address_line_two(self, address_line_two):
        """Sets the address_line_two of this AddressResourceModel.


        :param address_line_two: The address_line_two of this AddressResourceModel.  # noqa: E501
        :type: str
        """

        self._address_line_two = address_line_two

    @property
    def city(self):
        """Gets the city of this AddressResourceModel.  # noqa: E501


        :return: The city of this AddressResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this AddressResourceModel.


        :param city: The city of this AddressResourceModel.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this AddressResourceModel.  # noqa: E501


        :return: The state of this AddressResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AddressResourceModel.


        :param state: The state of this AddressResourceModel.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def zip(self):
        """Gets the zip of this AddressResourceModel.  # noqa: E501


        :return: The zip of this AddressResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this AddressResourceModel.


        :param zip: The zip of this AddressResourceModel.  # noqa: E501
        :type: str
        """

        self._zip = zip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddressResourceModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddressResourceModel):
            return True

        return self.to_dict() != other.to_dict()
