# coding: utf-8

"""
    MarketSharp CRM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ActivityReferenceResourceModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'company_id': 'str',
        'name': 'str',
        'inquiry_required': 'bool',
        'appointment_required': 'bool',
        'position': 'int',
        'is_active': 'bool',
        'call_out_script_template_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'company_id': 'companyId',
        'name': 'name',
        'inquiry_required': 'inquiryRequired',
        'appointment_required': 'appointmentRequired',
        'position': 'position',
        'is_active': 'isActive',
        'call_out_script_template_id': 'callOutScriptTemplateId'
    }

    def __init__(self, id=None, company_id=None, name=None, inquiry_required=None, appointment_required=None, position=None, is_active=None, call_out_script_template_id=None, local_vars_configuration=None):  # noqa: E501
        """ActivityReferenceResourceModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._company_id = None
        self._name = None
        self._inquiry_required = None
        self._appointment_required = None
        self._position = None
        self._is_active = None
        self._call_out_script_template_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if company_id is not None:
            self.company_id = company_id
        if name is not None:
            self.name = name
        if inquiry_required is not None:
            self.inquiry_required = inquiry_required
        if appointment_required is not None:
            self.appointment_required = appointment_required
        if position is not None:
            self.position = position
        if is_active is not None:
            self.is_active = is_active
        if call_out_script_template_id is not None:
            self.call_out_script_template_id = call_out_script_template_id

    @property
    def id(self):
        """Gets the id of this ActivityReferenceResourceModel.  # noqa: E501


        :return: The id of this ActivityReferenceResourceModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActivityReferenceResourceModel.


        :param id: The id of this ActivityReferenceResourceModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def company_id(self):
        """Gets the company_id of this ActivityReferenceResourceModel.  # noqa: E501


        :return: The company_id of this ActivityReferenceResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this ActivityReferenceResourceModel.


        :param company_id: The company_id of this ActivityReferenceResourceModel.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def name(self):
        """Gets the name of this ActivityReferenceResourceModel.  # noqa: E501


        :return: The name of this ActivityReferenceResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActivityReferenceResourceModel.


        :param name: The name of this ActivityReferenceResourceModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def inquiry_required(self):
        """Gets the inquiry_required of this ActivityReferenceResourceModel.  # noqa: E501


        :return: The inquiry_required of this ActivityReferenceResourceModel.  # noqa: E501
        :rtype: bool
        """
        return self._inquiry_required

    @inquiry_required.setter
    def inquiry_required(self, inquiry_required):
        """Sets the inquiry_required of this ActivityReferenceResourceModel.


        :param inquiry_required: The inquiry_required of this ActivityReferenceResourceModel.  # noqa: E501
        :type: bool
        """

        self._inquiry_required = inquiry_required

    @property
    def appointment_required(self):
        """Gets the appointment_required of this ActivityReferenceResourceModel.  # noqa: E501


        :return: The appointment_required of this ActivityReferenceResourceModel.  # noqa: E501
        :rtype: bool
        """
        return self._appointment_required

    @appointment_required.setter
    def appointment_required(self, appointment_required):
        """Sets the appointment_required of this ActivityReferenceResourceModel.


        :param appointment_required: The appointment_required of this ActivityReferenceResourceModel.  # noqa: E501
        :type: bool
        """

        self._appointment_required = appointment_required

    @property
    def position(self):
        """Gets the position of this ActivityReferenceResourceModel.  # noqa: E501


        :return: The position of this ActivityReferenceResourceModel.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ActivityReferenceResourceModel.


        :param position: The position of this ActivityReferenceResourceModel.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def is_active(self):
        """Gets the is_active of this ActivityReferenceResourceModel.  # noqa: E501


        :return: The is_active of this ActivityReferenceResourceModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this ActivityReferenceResourceModel.


        :param is_active: The is_active of this ActivityReferenceResourceModel.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def call_out_script_template_id(self):
        """Gets the call_out_script_template_id of this ActivityReferenceResourceModel.  # noqa: E501


        :return: The call_out_script_template_id of this ActivityReferenceResourceModel.  # noqa: E501
        :rtype: int
        """
        return self._call_out_script_template_id

    @call_out_script_template_id.setter
    def call_out_script_template_id(self, call_out_script_template_id):
        """Sets the call_out_script_template_id of this ActivityReferenceResourceModel.


        :param call_out_script_template_id: The call_out_script_template_id of this ActivityReferenceResourceModel.  # noqa: E501
        :type: int
        """

        self._call_out_script_template_id = call_out_script_template_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityReferenceResourceModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ActivityReferenceResourceModel):
            return True

        return self.to_dict() != other.to_dict()
