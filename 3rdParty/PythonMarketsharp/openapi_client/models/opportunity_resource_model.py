# coding: utf-8

"""
    MarketSharp CRM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class OpportunityResourceModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'inquiry_id': 'str',
        'contact_id': 'str',
        'job_id': 'str',
        'inquiry_description': 'str',
        'inquiry_notes': 'str',
        'inquiry_date_time': 'datetime',
        'inquiry_division': 'str',
        'inquiry_status_id': 'int',
        'job_site_address': 'AddressResourceModel'
    }

    attribute_map = {
        'inquiry_id': 'inquiryId',
        'contact_id': 'contactId',
        'job_id': 'jobId',
        'inquiry_description': 'inquiryDescription',
        'inquiry_notes': 'inquiryNotes',
        'inquiry_date_time': 'inquiryDateTime',
        'inquiry_division': 'inquiryDivision',
        'inquiry_status_id': 'inquiryStatusId',
        'job_site_address': 'jobSiteAddress'
    }

    def __init__(self, inquiry_id=None, contact_id=None, job_id=None, inquiry_description=None, inquiry_notes=None, inquiry_date_time=None, inquiry_division=None, inquiry_status_id=None, job_site_address=None, local_vars_configuration=None):  # noqa: E501
        """OpportunityResourceModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._inquiry_id = None
        self._contact_id = None
        self._job_id = None
        self._inquiry_description = None
        self._inquiry_notes = None
        self._inquiry_date_time = None
        self._inquiry_division = None
        self._inquiry_status_id = None
        self._job_site_address = None
        self.discriminator = None

        if inquiry_id is not None:
            self.inquiry_id = inquiry_id
        if contact_id is not None:
            self.contact_id = contact_id
        if job_id is not None:
            self.job_id = job_id
        if inquiry_description is not None:
            self.inquiry_description = inquiry_description
        if inquiry_notes is not None:
            self.inquiry_notes = inquiry_notes
        if inquiry_date_time is not None:
            self.inquiry_date_time = inquiry_date_time
        if inquiry_division is not None:
            self.inquiry_division = inquiry_division
        if inquiry_status_id is not None:
            self.inquiry_status_id = inquiry_status_id
        if job_site_address is not None:
            self.job_site_address = job_site_address

    @property
    def inquiry_id(self):
        """Gets the inquiry_id of this OpportunityResourceModel.  # noqa: E501

        The lead/inquiry id  # noqa: E501

        :return: The inquiry_id of this OpportunityResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._inquiry_id

    @inquiry_id.setter
    def inquiry_id(self, inquiry_id):
        """Sets the inquiry_id of this OpportunityResourceModel.

        The lead/inquiry id  # noqa: E501

        :param inquiry_id: The inquiry_id of this OpportunityResourceModel.  # noqa: E501
        :type: str
        """

        self._inquiry_id = inquiry_id

    @property
    def contact_id(self):
        """Gets the contact_id of this OpportunityResourceModel.  # noqa: E501

        The contact this lead and job is tied to  # noqa: E501

        :return: The contact_id of this OpportunityResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this OpportunityResourceModel.

        The contact this lead and job is tied to  # noqa: E501

        :param contact_id: The contact_id of this OpportunityResourceModel.  # noqa: E501
        :type: str
        """

        self._contact_id = contact_id

    @property
    def job_id(self):
        """Gets the job_id of this OpportunityResourceModel.  # noqa: E501

        Will be null if no job has been created.  A lead may be tied to more than one job, but we're choosing to make each job/lead a single opportunity  # noqa: E501

        :return: The job_id of this OpportunityResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this OpportunityResourceModel.

        Will be null if no job has been created.  A lead may be tied to more than one job, but we're choosing to make each job/lead a single opportunity  # noqa: E501

        :param job_id: The job_id of this OpportunityResourceModel.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def inquiry_description(self):
        """Gets the inquiry_description of this OpportunityResourceModel.  # noqa: E501

        Description field. Not used by classic marketsharp. Lead Capture can insert some description here sometimes  # noqa: E501

        :return: The inquiry_description of this OpportunityResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._inquiry_description

    @inquiry_description.setter
    def inquiry_description(self, inquiry_description):
        """Sets the inquiry_description of this OpportunityResourceModel.

        Description field. Not used by classic marketsharp. Lead Capture can insert some description here sometimes  # noqa: E501

        :param inquiry_description: The inquiry_description of this OpportunityResourceModel.  # noqa: E501
        :type: str
        """

        self._inquiry_description = inquiry_description

    @property
    def inquiry_notes(self):
        """Gets the inquiry_notes of this OpportunityResourceModel.  # noqa: E501

        Notes  # noqa: E501

        :return: The inquiry_notes of this OpportunityResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._inquiry_notes

    @inquiry_notes.setter
    def inquiry_notes(self, inquiry_notes):
        """Sets the inquiry_notes of this OpportunityResourceModel.

        Notes  # noqa: E501

        :param inquiry_notes: The inquiry_notes of this OpportunityResourceModel.  # noqa: E501
        :type: str
        """

        self._inquiry_notes = inquiry_notes

    @property
    def inquiry_date_time(self):
        """Gets the inquiry_date_time of this OpportunityResourceModel.  # noqa: E501

        Inquiry Date Time. Usually set by an employee when the inquiry came in  # noqa: E501

        :return: The inquiry_date_time of this OpportunityResourceModel.  # noqa: E501
        :rtype: datetime
        """
        return self._inquiry_date_time

    @inquiry_date_time.setter
    def inquiry_date_time(self, inquiry_date_time):
        """Sets the inquiry_date_time of this OpportunityResourceModel.

        Inquiry Date Time. Usually set by an employee when the inquiry came in  # noqa: E501

        :param inquiry_date_time: The inquiry_date_time of this OpportunityResourceModel.  # noqa: E501
        :type: datetime
        """

        self._inquiry_date_time = inquiry_date_time

    @property
    def inquiry_division(self):
        """Gets the inquiry_division of this OpportunityResourceModel.  # noqa: E501

        Text containing inquiry division if any  # noqa: E501

        :return: The inquiry_division of this OpportunityResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._inquiry_division

    @inquiry_division.setter
    def inquiry_division(self, inquiry_division):
        """Sets the inquiry_division of this OpportunityResourceModel.

        Text containing inquiry division if any  # noqa: E501

        :param inquiry_division: The inquiry_division of this OpportunityResourceModel.  # noqa: E501
        :type: str
        """

        self._inquiry_division = inquiry_division

    @property
    def inquiry_status_id(self):
        """Gets the inquiry_status_id of this OpportunityResourceModel.  # noqa: E501

        Inquiry status id if any  # noqa: E501

        :return: The inquiry_status_id of this OpportunityResourceModel.  # noqa: E501
        :rtype: int
        """
        return self._inquiry_status_id

    @inquiry_status_id.setter
    def inquiry_status_id(self, inquiry_status_id):
        """Sets the inquiry_status_id of this OpportunityResourceModel.

        Inquiry status id if any  # noqa: E501

        :param inquiry_status_id: The inquiry_status_id of this OpportunityResourceModel.  # noqa: E501
        :type: int
        """

        self._inquiry_status_id = inquiry_status_id

    @property
    def job_site_address(self):
        """Gets the job_site_address of this OpportunityResourceModel.  # noqa: E501


        :return: The job_site_address of this OpportunityResourceModel.  # noqa: E501
        :rtype: AddressResourceModel
        """
        return self._job_site_address

    @job_site_address.setter
    def job_site_address(self, job_site_address):
        """Sets the job_site_address of this OpportunityResourceModel.


        :param job_site_address: The job_site_address of this OpportunityResourceModel.  # noqa: E501
        :type: AddressResourceModel
        """

        self._job_site_address = job_site_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpportunityResourceModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OpportunityResourceModel):
            return True

        return self.to_dict() != other.to_dict()
