# coding: utf-8

"""
    MarketSharp CRM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ViewResourceModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'view_list': 'list[KeyValueResourceModel]',
        'view_id': 'str',
        'view_name': 'str',
        'is_public': 'bool',
        'selected_field_list': 'list[ListField]',
        'available_field_list': 'list[ListField]'
    }

    attribute_map = {
        'view_list': 'viewList',
        'view_id': 'viewId',
        'view_name': 'viewName',
        'is_public': 'isPublic',
        'selected_field_list': 'selectedFieldList',
        'available_field_list': 'availableFieldList'
    }

    def __init__(self, view_list=None, view_id=None, view_name=None, is_public=None, selected_field_list=None, available_field_list=None, local_vars_configuration=None):  # noqa: E501
        """ViewResourceModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._view_list = None
        self._view_id = None
        self._view_name = None
        self._is_public = None
        self._selected_field_list = None
        self._available_field_list = None
        self.discriminator = None

        if view_list is not None:
            self.view_list = view_list
        if view_id is not None:
            self.view_id = view_id
        if view_name is not None:
            self.view_name = view_name
        if is_public is not None:
            self.is_public = is_public
        if selected_field_list is not None:
            self.selected_field_list = selected_field_list
        if available_field_list is not None:
            self.available_field_list = available_field_list

    @property
    def view_list(self):
        """Gets the view_list of this ViewResourceModel.  # noqa: E501


        :return: The view_list of this ViewResourceModel.  # noqa: E501
        :rtype: list[KeyValueResourceModel]
        """
        return self._view_list

    @view_list.setter
    def view_list(self, view_list):
        """Sets the view_list of this ViewResourceModel.


        :param view_list: The view_list of this ViewResourceModel.  # noqa: E501
        :type: list[KeyValueResourceModel]
        """

        self._view_list = view_list

    @property
    def view_id(self):
        """Gets the view_id of this ViewResourceModel.  # noqa: E501


        :return: The view_id of this ViewResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._view_id

    @view_id.setter
    def view_id(self, view_id):
        """Sets the view_id of this ViewResourceModel.


        :param view_id: The view_id of this ViewResourceModel.  # noqa: E501
        :type: str
        """

        self._view_id = view_id

    @property
    def view_name(self):
        """Gets the view_name of this ViewResourceModel.  # noqa: E501


        :return: The view_name of this ViewResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._view_name

    @view_name.setter
    def view_name(self, view_name):
        """Sets the view_name of this ViewResourceModel.


        :param view_name: The view_name of this ViewResourceModel.  # noqa: E501
        :type: str
        """

        self._view_name = view_name

    @property
    def is_public(self):
        """Gets the is_public of this ViewResourceModel.  # noqa: E501


        :return: The is_public of this ViewResourceModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this ViewResourceModel.


        :param is_public: The is_public of this ViewResourceModel.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    @property
    def selected_field_list(self):
        """Gets the selected_field_list of this ViewResourceModel.  # noqa: E501


        :return: The selected_field_list of this ViewResourceModel.  # noqa: E501
        :rtype: list[ListField]
        """
        return self._selected_field_list

    @selected_field_list.setter
    def selected_field_list(self, selected_field_list):
        """Sets the selected_field_list of this ViewResourceModel.


        :param selected_field_list: The selected_field_list of this ViewResourceModel.  # noqa: E501
        :type: list[ListField]
        """

        self._selected_field_list = selected_field_list

    @property
    def available_field_list(self):
        """Gets the available_field_list of this ViewResourceModel.  # noqa: E501


        :return: The available_field_list of this ViewResourceModel.  # noqa: E501
        :rtype: list[ListField]
        """
        return self._available_field_list

    @available_field_list.setter
    def available_field_list(self, available_field_list):
        """Sets the available_field_list of this ViewResourceModel.


        :param available_field_list: The available_field_list of this ViewResourceModel.  # noqa: E501
        :type: list[ListField]
        """

        self._available_field_list = available_field_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ViewResourceModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ViewResourceModel):
            return True

        return self.to_dict() != other.to_dict()
