# coding: utf-8

"""
    MarketSharp CRM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ProductionStepBindingModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'assigned_to_id': 'str',
        'process_type_step_id': 'str',
        'expected_start_date': 'datetime',
        'actual_start_date': 'datetime',
        'expected_end_date': 'datetime',
        'actual_end_date': 'datetime',
        'notes': 'str',
        'scheduler_id': 'int',
        'is_scheduler_enabled': 'bool',
        'is_work_order_enabled': 'bool',
        'step_order': 'int',
        'activity_process_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'assigned_to_id': 'assignedToId',
        'process_type_step_id': 'processTypeStepId',
        'expected_start_date': 'expectedStartDate',
        'actual_start_date': 'actualStartDate',
        'expected_end_date': 'expectedEndDate',
        'actual_end_date': 'actualEndDate',
        'notes': 'notes',
        'scheduler_id': 'schedulerId',
        'is_scheduler_enabled': 'isSchedulerEnabled',
        'is_work_order_enabled': 'isWorkOrderEnabled',
        'step_order': 'stepOrder',
        'activity_process_id': 'activityProcessId'
    }

    def __init__(self, id=None, name=None, assigned_to_id=None, process_type_step_id=None, expected_start_date=None, actual_start_date=None, expected_end_date=None, actual_end_date=None, notes=None, scheduler_id=None, is_scheduler_enabled=None, is_work_order_enabled=None, step_order=None, activity_process_id=None, local_vars_configuration=None):  # noqa: E501
        """ProductionStepBindingModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._assigned_to_id = None
        self._process_type_step_id = None
        self._expected_start_date = None
        self._actual_start_date = None
        self._expected_end_date = None
        self._actual_end_date = None
        self._notes = None
        self._scheduler_id = None
        self._is_scheduler_enabled = None
        self._is_work_order_enabled = None
        self._step_order = None
        self._activity_process_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if assigned_to_id is not None:
            self.assigned_to_id = assigned_to_id
        if process_type_step_id is not None:
            self.process_type_step_id = process_type_step_id
        if expected_start_date is not None:
            self.expected_start_date = expected_start_date
        if actual_start_date is not None:
            self.actual_start_date = actual_start_date
        if expected_end_date is not None:
            self.expected_end_date = expected_end_date
        if actual_end_date is not None:
            self.actual_end_date = actual_end_date
        if notes is not None:
            self.notes = notes
        if scheduler_id is not None:
            self.scheduler_id = scheduler_id
        if is_scheduler_enabled is not None:
            self.is_scheduler_enabled = is_scheduler_enabled
        if is_work_order_enabled is not None:
            self.is_work_order_enabled = is_work_order_enabled
        if step_order is not None:
            self.step_order = step_order
        if activity_process_id is not None:
            self.activity_process_id = activity_process_id

    @property
    def id(self):
        """Gets the id of this ProductionStepBindingModel.  # noqa: E501


        :return: The id of this ProductionStepBindingModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductionStepBindingModel.


        :param id: The id of this ProductionStepBindingModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ProductionStepBindingModel.  # noqa: E501


        :return: The name of this ProductionStepBindingModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductionStepBindingModel.


        :param name: The name of this ProductionStepBindingModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def assigned_to_id(self):
        """Gets the assigned_to_id of this ProductionStepBindingModel.  # noqa: E501


        :return: The assigned_to_id of this ProductionStepBindingModel.  # noqa: E501
        :rtype: str
        """
        return self._assigned_to_id

    @assigned_to_id.setter
    def assigned_to_id(self, assigned_to_id):
        """Sets the assigned_to_id of this ProductionStepBindingModel.


        :param assigned_to_id: The assigned_to_id of this ProductionStepBindingModel.  # noqa: E501
        :type: str
        """

        self._assigned_to_id = assigned_to_id

    @property
    def process_type_step_id(self):
        """Gets the process_type_step_id of this ProductionStepBindingModel.  # noqa: E501


        :return: The process_type_step_id of this ProductionStepBindingModel.  # noqa: E501
        :rtype: str
        """
        return self._process_type_step_id

    @process_type_step_id.setter
    def process_type_step_id(self, process_type_step_id):
        """Sets the process_type_step_id of this ProductionStepBindingModel.


        :param process_type_step_id: The process_type_step_id of this ProductionStepBindingModel.  # noqa: E501
        :type: str
        """

        self._process_type_step_id = process_type_step_id

    @property
    def expected_start_date(self):
        """Gets the expected_start_date of this ProductionStepBindingModel.  # noqa: E501


        :return: The expected_start_date of this ProductionStepBindingModel.  # noqa: E501
        :rtype: datetime
        """
        return self._expected_start_date

    @expected_start_date.setter
    def expected_start_date(self, expected_start_date):
        """Sets the expected_start_date of this ProductionStepBindingModel.


        :param expected_start_date: The expected_start_date of this ProductionStepBindingModel.  # noqa: E501
        :type: datetime
        """

        self._expected_start_date = expected_start_date

    @property
    def actual_start_date(self):
        """Gets the actual_start_date of this ProductionStepBindingModel.  # noqa: E501


        :return: The actual_start_date of this ProductionStepBindingModel.  # noqa: E501
        :rtype: datetime
        """
        return self._actual_start_date

    @actual_start_date.setter
    def actual_start_date(self, actual_start_date):
        """Sets the actual_start_date of this ProductionStepBindingModel.


        :param actual_start_date: The actual_start_date of this ProductionStepBindingModel.  # noqa: E501
        :type: datetime
        """

        self._actual_start_date = actual_start_date

    @property
    def expected_end_date(self):
        """Gets the expected_end_date of this ProductionStepBindingModel.  # noqa: E501


        :return: The expected_end_date of this ProductionStepBindingModel.  # noqa: E501
        :rtype: datetime
        """
        return self._expected_end_date

    @expected_end_date.setter
    def expected_end_date(self, expected_end_date):
        """Sets the expected_end_date of this ProductionStepBindingModel.


        :param expected_end_date: The expected_end_date of this ProductionStepBindingModel.  # noqa: E501
        :type: datetime
        """

        self._expected_end_date = expected_end_date

    @property
    def actual_end_date(self):
        """Gets the actual_end_date of this ProductionStepBindingModel.  # noqa: E501


        :return: The actual_end_date of this ProductionStepBindingModel.  # noqa: E501
        :rtype: datetime
        """
        return self._actual_end_date

    @actual_end_date.setter
    def actual_end_date(self, actual_end_date):
        """Sets the actual_end_date of this ProductionStepBindingModel.


        :param actual_end_date: The actual_end_date of this ProductionStepBindingModel.  # noqa: E501
        :type: datetime
        """

        self._actual_end_date = actual_end_date

    @property
    def notes(self):
        """Gets the notes of this ProductionStepBindingModel.  # noqa: E501


        :return: The notes of this ProductionStepBindingModel.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ProductionStepBindingModel.


        :param notes: The notes of this ProductionStepBindingModel.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def scheduler_id(self):
        """Gets the scheduler_id of this ProductionStepBindingModel.  # noqa: E501


        :return: The scheduler_id of this ProductionStepBindingModel.  # noqa: E501
        :rtype: int
        """
        return self._scheduler_id

    @scheduler_id.setter
    def scheduler_id(self, scheduler_id):
        """Sets the scheduler_id of this ProductionStepBindingModel.


        :param scheduler_id: The scheduler_id of this ProductionStepBindingModel.  # noqa: E501
        :type: int
        """

        self._scheduler_id = scheduler_id

    @property
    def is_scheduler_enabled(self):
        """Gets the is_scheduler_enabled of this ProductionStepBindingModel.  # noqa: E501


        :return: The is_scheduler_enabled of this ProductionStepBindingModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_scheduler_enabled

    @is_scheduler_enabled.setter
    def is_scheduler_enabled(self, is_scheduler_enabled):
        """Sets the is_scheduler_enabled of this ProductionStepBindingModel.


        :param is_scheduler_enabled: The is_scheduler_enabled of this ProductionStepBindingModel.  # noqa: E501
        :type: bool
        """

        self._is_scheduler_enabled = is_scheduler_enabled

    @property
    def is_work_order_enabled(self):
        """Gets the is_work_order_enabled of this ProductionStepBindingModel.  # noqa: E501


        :return: The is_work_order_enabled of this ProductionStepBindingModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_work_order_enabled

    @is_work_order_enabled.setter
    def is_work_order_enabled(self, is_work_order_enabled):
        """Sets the is_work_order_enabled of this ProductionStepBindingModel.


        :param is_work_order_enabled: The is_work_order_enabled of this ProductionStepBindingModel.  # noqa: E501
        :type: bool
        """

        self._is_work_order_enabled = is_work_order_enabled

    @property
    def step_order(self):
        """Gets the step_order of this ProductionStepBindingModel.  # noqa: E501


        :return: The step_order of this ProductionStepBindingModel.  # noqa: E501
        :rtype: int
        """
        return self._step_order

    @step_order.setter
    def step_order(self, step_order):
        """Sets the step_order of this ProductionStepBindingModel.


        :param step_order: The step_order of this ProductionStepBindingModel.  # noqa: E501
        :type: int
        """

        self._step_order = step_order

    @property
    def activity_process_id(self):
        """Gets the activity_process_id of this ProductionStepBindingModel.  # noqa: E501


        :return: The activity_process_id of this ProductionStepBindingModel.  # noqa: E501
        :rtype: str
        """
        return self._activity_process_id

    @activity_process_id.setter
    def activity_process_id(self, activity_process_id):
        """Sets the activity_process_id of this ProductionStepBindingModel.


        :param activity_process_id: The activity_process_id of this ProductionStepBindingModel.  # noqa: E501
        :type: str
        """

        self._activity_process_id = activity_process_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductionStepBindingModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProductionStepBindingModel):
            return True

        return self.to_dict() != other.to_dict()
