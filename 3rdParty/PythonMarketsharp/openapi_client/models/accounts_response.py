# coding: utf-8

"""
    MarketSharp CRM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class AccountsResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'credit_card_accounts': 'list[CCResponse]',
        'ach_accounts': 'list[ACHResponse]'
    }

    attribute_map = {
        'credit_card_accounts': 'creditCardAccounts',
        'ach_accounts': 'achAccounts'
    }

    def __init__(self, credit_card_accounts=None, ach_accounts=None, local_vars_configuration=None):  # noqa: E501
        """AccountsResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._credit_card_accounts = None
        self._ach_accounts = None
        self.discriminator = None

        if credit_card_accounts is not None:
            self.credit_card_accounts = credit_card_accounts
        if ach_accounts is not None:
            self.ach_accounts = ach_accounts

    @property
    def credit_card_accounts(self):
        """Gets the credit_card_accounts of this AccountsResponse.  # noqa: E501


        :return: The credit_card_accounts of this AccountsResponse.  # noqa: E501
        :rtype: list[CCResponse]
        """
        return self._credit_card_accounts

    @credit_card_accounts.setter
    def credit_card_accounts(self, credit_card_accounts):
        """Sets the credit_card_accounts of this AccountsResponse.


        :param credit_card_accounts: The credit_card_accounts of this AccountsResponse.  # noqa: E501
        :type: list[CCResponse]
        """

        self._credit_card_accounts = credit_card_accounts

    @property
    def ach_accounts(self):
        """Gets the ach_accounts of this AccountsResponse.  # noqa: E501


        :return: The ach_accounts of this AccountsResponse.  # noqa: E501
        :rtype: list[ACHResponse]
        """
        return self._ach_accounts

    @ach_accounts.setter
    def ach_accounts(self, ach_accounts):
        """Sets the ach_accounts of this AccountsResponse.


        :param ach_accounts: The ach_accounts of this AccountsResponse.  # noqa: E501
        :type: list[ACHResponse]
        """

        self._ach_accounts = ach_accounts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountsResponse):
            return True

        return self.to_dict() != other.to_dict()
