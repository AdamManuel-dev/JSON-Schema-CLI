# coding: utf-8

"""
    MarketSharp CRM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PaySimpleGetReconciliationBindingModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'payment_reconciliation_statuses': 'list[int]',
        'from_date': 'datetime'
    }

    attribute_map = {
        'payment_reconciliation_statuses': 'paymentReconciliationStatuses',
        'from_date': 'fromDate'
    }

    def __init__(self, payment_reconciliation_statuses=None, from_date=None, local_vars_configuration=None):  # noqa: E501
        """PaySimpleGetReconciliationBindingModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._payment_reconciliation_statuses = None
        self._from_date = None
        self.discriminator = None

        if payment_reconciliation_statuses is not None:
            self.payment_reconciliation_statuses = payment_reconciliation_statuses
        if from_date is not None:
            self.from_date = from_date

    @property
    def payment_reconciliation_statuses(self):
        """Gets the payment_reconciliation_statuses of this PaySimpleGetReconciliationBindingModel.  # noqa: E501


        :return: The payment_reconciliation_statuses of this PaySimpleGetReconciliationBindingModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._payment_reconciliation_statuses

    @payment_reconciliation_statuses.setter
    def payment_reconciliation_statuses(self, payment_reconciliation_statuses):
        """Sets the payment_reconciliation_statuses of this PaySimpleGetReconciliationBindingModel.


        :param payment_reconciliation_statuses: The payment_reconciliation_statuses of this PaySimpleGetReconciliationBindingModel.  # noqa: E501
        :type: list[int]
        """

        self._payment_reconciliation_statuses = payment_reconciliation_statuses

    @property
    def from_date(self):
        """Gets the from_date of this PaySimpleGetReconciliationBindingModel.  # noqa: E501


        :return: The from_date of this PaySimpleGetReconciliationBindingModel.  # noqa: E501
        :rtype: datetime
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this PaySimpleGetReconciliationBindingModel.


        :param from_date: The from_date of this PaySimpleGetReconciliationBindingModel.  # noqa: E501
        :type: datetime
        """

        self._from_date = from_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaySimpleGetReconciliationBindingModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PaySimpleGetReconciliationBindingModel):
            return True

        return self.to_dict() != other.to_dict()
