# coding: utf-8

"""
    MarketSharp CRM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class GeneralEventExceptionBindingModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'type_id': 'int',
        'title': 'str',
        'description': 'str',
        'location': 'str',
        'all_day_event': 'bool',
        'start': 'datetime',
        'end': 'datetime',
        'category_ids': 'list[int]',
        'last_update_date': 'datetime',
        'last_update_by': 'str',
        'created_date': 'datetime',
        'created_by': 'str',
        'send_email': 'bool',
        'event_details': 'str',
        'additional_details': 'dict(str, str)',
        'event_type': 'int',
        'additional_resource_ids': 'list[int]',
        'resource_ids': 'list[int]',
        'recurrence_id': 'int',
        'r_rule': 'str',
        'rule_exception': 'str',
        'recurrence_start_date_time': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'type_id': 'typeId',
        'title': 'title',
        'description': 'description',
        'location': 'location',
        'all_day_event': 'allDayEvent',
        'start': 'start',
        'end': 'end',
        'category_ids': 'categoryIds',
        'last_update_date': 'lastUpdateDate',
        'last_update_by': 'lastUpdateBy',
        'created_date': 'createdDate',
        'created_by': 'createdBy',
        'send_email': 'sendEmail',
        'event_details': 'eventDetails',
        'additional_details': 'additionalDetails',
        'event_type': 'eventType',
        'additional_resource_ids': 'additionalResourceIds',
        'resource_ids': 'resourceIds',
        'recurrence_id': 'recurrenceId',
        'r_rule': 'rRule',
        'rule_exception': 'ruleException',
        'recurrence_start_date_time': 'recurrenceStartDateTime'
    }

    def __init__(self, id=None, type_id=None, title=None, description=None, location=None, all_day_event=None, start=None, end=None, category_ids=None, last_update_date=None, last_update_by=None, created_date=None, created_by=None, send_email=None, event_details=None, additional_details=None, event_type=None, additional_resource_ids=None, resource_ids=None, recurrence_id=None, r_rule=None, rule_exception=None, recurrence_start_date_time=None, local_vars_configuration=None):  # noqa: E501
        """GeneralEventExceptionBindingModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._type_id = None
        self._title = None
        self._description = None
        self._location = None
        self._all_day_event = None
        self._start = None
        self._end = None
        self._category_ids = None
        self._last_update_date = None
        self._last_update_by = None
        self._created_date = None
        self._created_by = None
        self._send_email = None
        self._event_details = None
        self._additional_details = None
        self._event_type = None
        self._additional_resource_ids = None
        self._resource_ids = None
        self._recurrence_id = None
        self._r_rule = None
        self._rule_exception = None
        self._recurrence_start_date_time = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if type_id is not None:
            self.type_id = type_id
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if location is not None:
            self.location = location
        if all_day_event is not None:
            self.all_day_event = all_day_event
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if category_ids is not None:
            self.category_ids = category_ids
        if last_update_date is not None:
            self.last_update_date = last_update_date
        if last_update_by is not None:
            self.last_update_by = last_update_by
        if created_date is not None:
            self.created_date = created_date
        if created_by is not None:
            self.created_by = created_by
        if send_email is not None:
            self.send_email = send_email
        if event_details is not None:
            self.event_details = event_details
        if additional_details is not None:
            self.additional_details = additional_details
        if event_type is not None:
            self.event_type = event_type
        if additional_resource_ids is not None:
            self.additional_resource_ids = additional_resource_ids
        if resource_ids is not None:
            self.resource_ids = resource_ids
        if recurrence_id is not None:
            self.recurrence_id = recurrence_id
        if r_rule is not None:
            self.r_rule = r_rule
        if rule_exception is not None:
            self.rule_exception = rule_exception
        if recurrence_start_date_time is not None:
            self.recurrence_start_date_time = recurrence_start_date_time

    @property
    def id(self):
        """Gets the id of this GeneralEventExceptionBindingModel.  # noqa: E501


        :return: The id of this GeneralEventExceptionBindingModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GeneralEventExceptionBindingModel.


        :param id: The id of this GeneralEventExceptionBindingModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def type_id(self):
        """Gets the type_id of this GeneralEventExceptionBindingModel.  # noqa: E501


        :return: The type_id of this GeneralEventExceptionBindingModel.  # noqa: E501
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this GeneralEventExceptionBindingModel.


        :param type_id: The type_id of this GeneralEventExceptionBindingModel.  # noqa: E501
        :type: int
        """

        self._type_id = type_id

    @property
    def title(self):
        """Gets the title of this GeneralEventExceptionBindingModel.  # noqa: E501


        :return: The title of this GeneralEventExceptionBindingModel.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GeneralEventExceptionBindingModel.


        :param title: The title of this GeneralEventExceptionBindingModel.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this GeneralEventExceptionBindingModel.  # noqa: E501


        :return: The description of this GeneralEventExceptionBindingModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GeneralEventExceptionBindingModel.


        :param description: The description of this GeneralEventExceptionBindingModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def location(self):
        """Gets the location of this GeneralEventExceptionBindingModel.  # noqa: E501


        :return: The location of this GeneralEventExceptionBindingModel.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this GeneralEventExceptionBindingModel.


        :param location: The location of this GeneralEventExceptionBindingModel.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def all_day_event(self):
        """Gets the all_day_event of this GeneralEventExceptionBindingModel.  # noqa: E501


        :return: The all_day_event of this GeneralEventExceptionBindingModel.  # noqa: E501
        :rtype: bool
        """
        return self._all_day_event

    @all_day_event.setter
    def all_day_event(self, all_day_event):
        """Sets the all_day_event of this GeneralEventExceptionBindingModel.


        :param all_day_event: The all_day_event of this GeneralEventExceptionBindingModel.  # noqa: E501
        :type: bool
        """

        self._all_day_event = all_day_event

    @property
    def start(self):
        """Gets the start of this GeneralEventExceptionBindingModel.  # noqa: E501


        :return: The start of this GeneralEventExceptionBindingModel.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this GeneralEventExceptionBindingModel.


        :param start: The start of this GeneralEventExceptionBindingModel.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this GeneralEventExceptionBindingModel.  # noqa: E501


        :return: The end of this GeneralEventExceptionBindingModel.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this GeneralEventExceptionBindingModel.


        :param end: The end of this GeneralEventExceptionBindingModel.  # noqa: E501
        :type: datetime
        """

        self._end = end

    @property
    def category_ids(self):
        """Gets the category_ids of this GeneralEventExceptionBindingModel.  # noqa: E501


        :return: The category_ids of this GeneralEventExceptionBindingModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._category_ids

    @category_ids.setter
    def category_ids(self, category_ids):
        """Sets the category_ids of this GeneralEventExceptionBindingModel.


        :param category_ids: The category_ids of this GeneralEventExceptionBindingModel.  # noqa: E501
        :type: list[int]
        """

        self._category_ids = category_ids

    @property
    def last_update_date(self):
        """Gets the last_update_date of this GeneralEventExceptionBindingModel.  # noqa: E501


        :return: The last_update_date of this GeneralEventExceptionBindingModel.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_date

    @last_update_date.setter
    def last_update_date(self, last_update_date):
        """Sets the last_update_date of this GeneralEventExceptionBindingModel.


        :param last_update_date: The last_update_date of this GeneralEventExceptionBindingModel.  # noqa: E501
        :type: datetime
        """

        self._last_update_date = last_update_date

    @property
    def last_update_by(self):
        """Gets the last_update_by of this GeneralEventExceptionBindingModel.  # noqa: E501


        :return: The last_update_by of this GeneralEventExceptionBindingModel.  # noqa: E501
        :rtype: str
        """
        return self._last_update_by

    @last_update_by.setter
    def last_update_by(self, last_update_by):
        """Sets the last_update_by of this GeneralEventExceptionBindingModel.


        :param last_update_by: The last_update_by of this GeneralEventExceptionBindingModel.  # noqa: E501
        :type: str
        """

        self._last_update_by = last_update_by

    @property
    def created_date(self):
        """Gets the created_date of this GeneralEventExceptionBindingModel.  # noqa: E501


        :return: The created_date of this GeneralEventExceptionBindingModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this GeneralEventExceptionBindingModel.


        :param created_date: The created_date of this GeneralEventExceptionBindingModel.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def created_by(self):
        """Gets the created_by of this GeneralEventExceptionBindingModel.  # noqa: E501


        :return: The created_by of this GeneralEventExceptionBindingModel.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this GeneralEventExceptionBindingModel.


        :param created_by: The created_by of this GeneralEventExceptionBindingModel.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def send_email(self):
        """Gets the send_email of this GeneralEventExceptionBindingModel.  # noqa: E501


        :return: The send_email of this GeneralEventExceptionBindingModel.  # noqa: E501
        :rtype: bool
        """
        return self._send_email

    @send_email.setter
    def send_email(self, send_email):
        """Sets the send_email of this GeneralEventExceptionBindingModel.


        :param send_email: The send_email of this GeneralEventExceptionBindingModel.  # noqa: E501
        :type: bool
        """

        self._send_email = send_email

    @property
    def event_details(self):
        """Gets the event_details of this GeneralEventExceptionBindingModel.  # noqa: E501


        :return: The event_details of this GeneralEventExceptionBindingModel.  # noqa: E501
        :rtype: str
        """
        return self._event_details

    @event_details.setter
    def event_details(self, event_details):
        """Sets the event_details of this GeneralEventExceptionBindingModel.


        :param event_details: The event_details of this GeneralEventExceptionBindingModel.  # noqa: E501
        :type: str
        """

        self._event_details = event_details

    @property
    def additional_details(self):
        """Gets the additional_details of this GeneralEventExceptionBindingModel.  # noqa: E501


        :return: The additional_details of this GeneralEventExceptionBindingModel.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._additional_details

    @additional_details.setter
    def additional_details(self, additional_details):
        """Sets the additional_details of this GeneralEventExceptionBindingModel.


        :param additional_details: The additional_details of this GeneralEventExceptionBindingModel.  # noqa: E501
        :type: dict(str, str)
        """

        self._additional_details = additional_details

    @property
    def event_type(self):
        """Gets the event_type of this GeneralEventExceptionBindingModel.  # noqa: E501


        :return: The event_type of this GeneralEventExceptionBindingModel.  # noqa: E501
        :rtype: int
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this GeneralEventExceptionBindingModel.


        :param event_type: The event_type of this GeneralEventExceptionBindingModel.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, 4]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and event_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"  # noqa: E501
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def additional_resource_ids(self):
        """Gets the additional_resource_ids of this GeneralEventExceptionBindingModel.  # noqa: E501


        :return: The additional_resource_ids of this GeneralEventExceptionBindingModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._additional_resource_ids

    @additional_resource_ids.setter
    def additional_resource_ids(self, additional_resource_ids):
        """Sets the additional_resource_ids of this GeneralEventExceptionBindingModel.


        :param additional_resource_ids: The additional_resource_ids of this GeneralEventExceptionBindingModel.  # noqa: E501
        :type: list[int]
        """

        self._additional_resource_ids = additional_resource_ids

    @property
    def resource_ids(self):
        """Gets the resource_ids of this GeneralEventExceptionBindingModel.  # noqa: E501


        :return: The resource_ids of this GeneralEventExceptionBindingModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._resource_ids

    @resource_ids.setter
    def resource_ids(self, resource_ids):
        """Sets the resource_ids of this GeneralEventExceptionBindingModel.


        :param resource_ids: The resource_ids of this GeneralEventExceptionBindingModel.  # noqa: E501
        :type: list[int]
        """

        self._resource_ids = resource_ids

    @property
    def recurrence_id(self):
        """Gets the recurrence_id of this GeneralEventExceptionBindingModel.  # noqa: E501


        :return: The recurrence_id of this GeneralEventExceptionBindingModel.  # noqa: E501
        :rtype: int
        """
        return self._recurrence_id

    @recurrence_id.setter
    def recurrence_id(self, recurrence_id):
        """Sets the recurrence_id of this GeneralEventExceptionBindingModel.


        :param recurrence_id: The recurrence_id of this GeneralEventExceptionBindingModel.  # noqa: E501
        :type: int
        """

        self._recurrence_id = recurrence_id

    @property
    def r_rule(self):
        """Gets the r_rule of this GeneralEventExceptionBindingModel.  # noqa: E501


        :return: The r_rule of this GeneralEventExceptionBindingModel.  # noqa: E501
        :rtype: str
        """
        return self._r_rule

    @r_rule.setter
    def r_rule(self, r_rule):
        """Sets the r_rule of this GeneralEventExceptionBindingModel.


        :param r_rule: The r_rule of this GeneralEventExceptionBindingModel.  # noqa: E501
        :type: str
        """

        self._r_rule = r_rule

    @property
    def rule_exception(self):
        """Gets the rule_exception of this GeneralEventExceptionBindingModel.  # noqa: E501


        :return: The rule_exception of this GeneralEventExceptionBindingModel.  # noqa: E501
        :rtype: str
        """
        return self._rule_exception

    @rule_exception.setter
    def rule_exception(self, rule_exception):
        """Sets the rule_exception of this GeneralEventExceptionBindingModel.


        :param rule_exception: The rule_exception of this GeneralEventExceptionBindingModel.  # noqa: E501
        :type: str
        """

        self._rule_exception = rule_exception

    @property
    def recurrence_start_date_time(self):
        """Gets the recurrence_start_date_time of this GeneralEventExceptionBindingModel.  # noqa: E501


        :return: The recurrence_start_date_time of this GeneralEventExceptionBindingModel.  # noqa: E501
        :rtype: datetime
        """
        return self._recurrence_start_date_time

    @recurrence_start_date_time.setter
    def recurrence_start_date_time(self, recurrence_start_date_time):
        """Sets the recurrence_start_date_time of this GeneralEventExceptionBindingModel.


        :param recurrence_start_date_time: The recurrence_start_date_time of this GeneralEventExceptionBindingModel.  # noqa: E501
        :type: datetime
        """

        self._recurrence_start_date_time = recurrence_start_date_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeneralEventExceptionBindingModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GeneralEventExceptionBindingModel):
            return True

        return self.to_dict() != other.to_dict()
