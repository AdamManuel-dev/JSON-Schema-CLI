# coding: utf-8

"""
    MarketSharp CRM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class EventResourceModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'type_id': 'int',
        'resource_ids': 'list[int]',
        'title': 'str',
        'description': 'str',
        'location': 'str',
        'is_all_day': 'bool',
        'start': 'datetime',
        'end': 'datetime',
        'category_ids': 'list[int]',
        'recurrence_id': 'int',
        'recurrence_rule': 'str',
        'recurrence_exception': 'str',
        'last_update_date': 'datetime',
        'last_update_by': 'str',
        'created_date': 'datetime',
        'created_by': 'str',
        'read_only': 'bool',
        'activity_process_oid_to_update': 'str',
        'activity_contact_oid': 'str',
        'production_step_oid': 'str'
    }

    attribute_map = {
        'id': 'id',
        'type_id': 'typeId',
        'resource_ids': 'resourceIds',
        'title': 'title',
        'description': 'description',
        'location': 'location',
        'is_all_day': 'isAllDay',
        'start': 'start',
        'end': 'end',
        'category_ids': 'categoryIds',
        'recurrence_id': 'recurrenceId',
        'recurrence_rule': 'recurrenceRule',
        'recurrence_exception': 'recurrenceException',
        'last_update_date': 'lastUpdateDate',
        'last_update_by': 'lastUpdateBy',
        'created_date': 'createdDate',
        'created_by': 'createdBy',
        'read_only': 'readOnly',
        'activity_process_oid_to_update': 'activityProcessOidToUpdate',
        'activity_contact_oid': 'activityContactOid',
        'production_step_oid': 'productionStepOid'
    }

    def __init__(self, id=None, type_id=None, resource_ids=None, title=None, description=None, location=None, is_all_day=None, start=None, end=None, category_ids=None, recurrence_id=None, recurrence_rule=None, recurrence_exception=None, last_update_date=None, last_update_by=None, created_date=None, created_by=None, read_only=None, activity_process_oid_to_update=None, activity_contact_oid=None, production_step_oid=None, local_vars_configuration=None):  # noqa: E501
        """EventResourceModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._type_id = None
        self._resource_ids = None
        self._title = None
        self._description = None
        self._location = None
        self._is_all_day = None
        self._start = None
        self._end = None
        self._category_ids = None
        self._recurrence_id = None
        self._recurrence_rule = None
        self._recurrence_exception = None
        self._last_update_date = None
        self._last_update_by = None
        self._created_date = None
        self._created_by = None
        self._read_only = None
        self._activity_process_oid_to_update = None
        self._activity_contact_oid = None
        self._production_step_oid = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if type_id is not None:
            self.type_id = type_id
        if resource_ids is not None:
            self.resource_ids = resource_ids
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if location is not None:
            self.location = location
        if is_all_day is not None:
            self.is_all_day = is_all_day
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if category_ids is not None:
            self.category_ids = category_ids
        if recurrence_id is not None:
            self.recurrence_id = recurrence_id
        if recurrence_rule is not None:
            self.recurrence_rule = recurrence_rule
        if recurrence_exception is not None:
            self.recurrence_exception = recurrence_exception
        if last_update_date is not None:
            self.last_update_date = last_update_date
        if last_update_by is not None:
            self.last_update_by = last_update_by
        if created_date is not None:
            self.created_date = created_date
        if created_by is not None:
            self.created_by = created_by
        if read_only is not None:
            self.read_only = read_only
        if activity_process_oid_to_update is not None:
            self.activity_process_oid_to_update = activity_process_oid_to_update
        if activity_contact_oid is not None:
            self.activity_contact_oid = activity_contact_oid
        if production_step_oid is not None:
            self.production_step_oid = production_step_oid

    @property
    def id(self):
        """Gets the id of this EventResourceModel.  # noqa: E501


        :return: The id of this EventResourceModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventResourceModel.


        :param id: The id of this EventResourceModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def type_id(self):
        """Gets the type_id of this EventResourceModel.  # noqa: E501


        :return: The type_id of this EventResourceModel.  # noqa: E501
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this EventResourceModel.


        :param type_id: The type_id of this EventResourceModel.  # noqa: E501
        :type: int
        """

        self._type_id = type_id

    @property
    def resource_ids(self):
        """Gets the resource_ids of this EventResourceModel.  # noqa: E501


        :return: The resource_ids of this EventResourceModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._resource_ids

    @resource_ids.setter
    def resource_ids(self, resource_ids):
        """Sets the resource_ids of this EventResourceModel.


        :param resource_ids: The resource_ids of this EventResourceModel.  # noqa: E501
        :type: list[int]
        """

        self._resource_ids = resource_ids

    @property
    def title(self):
        """Gets the title of this EventResourceModel.  # noqa: E501


        :return: The title of this EventResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EventResourceModel.


        :param title: The title of this EventResourceModel.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this EventResourceModel.  # noqa: E501


        :return: The description of this EventResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EventResourceModel.


        :param description: The description of this EventResourceModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def location(self):
        """Gets the location of this EventResourceModel.  # noqa: E501


        :return: The location of this EventResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this EventResourceModel.


        :param location: The location of this EventResourceModel.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def is_all_day(self):
        """Gets the is_all_day of this EventResourceModel.  # noqa: E501


        :return: The is_all_day of this EventResourceModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_all_day

    @is_all_day.setter
    def is_all_day(self, is_all_day):
        """Sets the is_all_day of this EventResourceModel.


        :param is_all_day: The is_all_day of this EventResourceModel.  # noqa: E501
        :type: bool
        """

        self._is_all_day = is_all_day

    @property
    def start(self):
        """Gets the start of this EventResourceModel.  # noqa: E501


        :return: The start of this EventResourceModel.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this EventResourceModel.


        :param start: The start of this EventResourceModel.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this EventResourceModel.  # noqa: E501


        :return: The end of this EventResourceModel.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this EventResourceModel.


        :param end: The end of this EventResourceModel.  # noqa: E501
        :type: datetime
        """

        self._end = end

    @property
    def category_ids(self):
        """Gets the category_ids of this EventResourceModel.  # noqa: E501


        :return: The category_ids of this EventResourceModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._category_ids

    @category_ids.setter
    def category_ids(self, category_ids):
        """Sets the category_ids of this EventResourceModel.


        :param category_ids: The category_ids of this EventResourceModel.  # noqa: E501
        :type: list[int]
        """

        self._category_ids = category_ids

    @property
    def recurrence_id(self):
        """Gets the recurrence_id of this EventResourceModel.  # noqa: E501


        :return: The recurrence_id of this EventResourceModel.  # noqa: E501
        :rtype: int
        """
        return self._recurrence_id

    @recurrence_id.setter
    def recurrence_id(self, recurrence_id):
        """Sets the recurrence_id of this EventResourceModel.


        :param recurrence_id: The recurrence_id of this EventResourceModel.  # noqa: E501
        :type: int
        """

        self._recurrence_id = recurrence_id

    @property
    def recurrence_rule(self):
        """Gets the recurrence_rule of this EventResourceModel.  # noqa: E501


        :return: The recurrence_rule of this EventResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._recurrence_rule

    @recurrence_rule.setter
    def recurrence_rule(self, recurrence_rule):
        """Sets the recurrence_rule of this EventResourceModel.


        :param recurrence_rule: The recurrence_rule of this EventResourceModel.  # noqa: E501
        :type: str
        """

        self._recurrence_rule = recurrence_rule

    @property
    def recurrence_exception(self):
        """Gets the recurrence_exception of this EventResourceModel.  # noqa: E501


        :return: The recurrence_exception of this EventResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._recurrence_exception

    @recurrence_exception.setter
    def recurrence_exception(self, recurrence_exception):
        """Sets the recurrence_exception of this EventResourceModel.


        :param recurrence_exception: The recurrence_exception of this EventResourceModel.  # noqa: E501
        :type: str
        """

        self._recurrence_exception = recurrence_exception

    @property
    def last_update_date(self):
        """Gets the last_update_date of this EventResourceModel.  # noqa: E501


        :return: The last_update_date of this EventResourceModel.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_date

    @last_update_date.setter
    def last_update_date(self, last_update_date):
        """Sets the last_update_date of this EventResourceModel.


        :param last_update_date: The last_update_date of this EventResourceModel.  # noqa: E501
        :type: datetime
        """

        self._last_update_date = last_update_date

    @property
    def last_update_by(self):
        """Gets the last_update_by of this EventResourceModel.  # noqa: E501


        :return: The last_update_by of this EventResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._last_update_by

    @last_update_by.setter
    def last_update_by(self, last_update_by):
        """Sets the last_update_by of this EventResourceModel.


        :param last_update_by: The last_update_by of this EventResourceModel.  # noqa: E501
        :type: str
        """

        self._last_update_by = last_update_by

    @property
    def created_date(self):
        """Gets the created_date of this EventResourceModel.  # noqa: E501


        :return: The created_date of this EventResourceModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this EventResourceModel.


        :param created_date: The created_date of this EventResourceModel.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def created_by(self):
        """Gets the created_by of this EventResourceModel.  # noqa: E501


        :return: The created_by of this EventResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this EventResourceModel.


        :param created_by: The created_by of this EventResourceModel.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def read_only(self):
        """Gets the read_only of this EventResourceModel.  # noqa: E501


        :return: The read_only of this EventResourceModel.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this EventResourceModel.


        :param read_only: The read_only of this EventResourceModel.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    @property
    def activity_process_oid_to_update(self):
        """Gets the activity_process_oid_to_update of this EventResourceModel.  # noqa: E501


        :return: The activity_process_oid_to_update of this EventResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._activity_process_oid_to_update

    @activity_process_oid_to_update.setter
    def activity_process_oid_to_update(self, activity_process_oid_to_update):
        """Sets the activity_process_oid_to_update of this EventResourceModel.


        :param activity_process_oid_to_update: The activity_process_oid_to_update of this EventResourceModel.  # noqa: E501
        :type: str
        """

        self._activity_process_oid_to_update = activity_process_oid_to_update

    @property
    def activity_contact_oid(self):
        """Gets the activity_contact_oid of this EventResourceModel.  # noqa: E501


        :return: The activity_contact_oid of this EventResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._activity_contact_oid

    @activity_contact_oid.setter
    def activity_contact_oid(self, activity_contact_oid):
        """Sets the activity_contact_oid of this EventResourceModel.


        :param activity_contact_oid: The activity_contact_oid of this EventResourceModel.  # noqa: E501
        :type: str
        """

        self._activity_contact_oid = activity_contact_oid

    @property
    def production_step_oid(self):
        """Gets the production_step_oid of this EventResourceModel.  # noqa: E501


        :return: The production_step_oid of this EventResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._production_step_oid

    @production_step_oid.setter
    def production_step_oid(self, production_step_oid):
        """Sets the production_step_oid of this EventResourceModel.


        :param production_step_oid: The production_step_oid of this EventResourceModel.  # noqa: E501
        :type: str
        """

        self._production_step_oid = production_step_oid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventResourceModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EventResourceModel):
            return True

        return self.to_dict() != other.to_dict()
