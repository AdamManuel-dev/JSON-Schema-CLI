# coding: utf-8

"""
    MarketSharp CRM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class AddressViewResourceModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bar_code': 'str',
        'carrier_route': 'str',
        'cass': 'str',
        'city': 'str',
        'county': 'str',
        'dpbc': 'str',
        'latitude': 'str',
        'longitude': 'str',
        'address_line1': 'str',
        'address_line2': 'str',
        'state': 'str',
        'zip': 'str',
        'zip4': 'str',
        'country': 'str'
    }

    attribute_map = {
        'bar_code': 'barCode',
        'carrier_route': 'carrierRoute',
        'cass': 'CASS',
        'city': 'city',
        'county': 'county',
        'dpbc': 'DPBC',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'address_line1': 'addressLine1',
        'address_line2': 'addressLine2',
        'state': 'state',
        'zip': 'zip',
        'zip4': 'zip4',
        'country': 'country'
    }

    def __init__(self, bar_code=None, carrier_route=None, cass=None, city=None, county=None, dpbc=None, latitude=None, longitude=None, address_line1=None, address_line2=None, state=None, zip=None, zip4=None, country=None, local_vars_configuration=None):  # noqa: E501
        """AddressViewResourceModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bar_code = None
        self._carrier_route = None
        self._cass = None
        self._city = None
        self._county = None
        self._dpbc = None
        self._latitude = None
        self._longitude = None
        self._address_line1 = None
        self._address_line2 = None
        self._state = None
        self._zip = None
        self._zip4 = None
        self._country = None
        self.discriminator = None

        if bar_code is not None:
            self.bar_code = bar_code
        if carrier_route is not None:
            self.carrier_route = carrier_route
        if cass is not None:
            self.cass = cass
        if city is not None:
            self.city = city
        if county is not None:
            self.county = county
        if dpbc is not None:
            self.dpbc = dpbc
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if address_line1 is not None:
            self.address_line1 = address_line1
        if address_line2 is not None:
            self.address_line2 = address_line2
        if state is not None:
            self.state = state
        if zip is not None:
            self.zip = zip
        if zip4 is not None:
            self.zip4 = zip4
        if country is not None:
            self.country = country

    @property
    def bar_code(self):
        """Gets the bar_code of this AddressViewResourceModel.  # noqa: E501


        :return: The bar_code of this AddressViewResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._bar_code

    @bar_code.setter
    def bar_code(self, bar_code):
        """Sets the bar_code of this AddressViewResourceModel.


        :param bar_code: The bar_code of this AddressViewResourceModel.  # noqa: E501
        :type: str
        """

        self._bar_code = bar_code

    @property
    def carrier_route(self):
        """Gets the carrier_route of this AddressViewResourceModel.  # noqa: E501


        :return: The carrier_route of this AddressViewResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._carrier_route

    @carrier_route.setter
    def carrier_route(self, carrier_route):
        """Sets the carrier_route of this AddressViewResourceModel.


        :param carrier_route: The carrier_route of this AddressViewResourceModel.  # noqa: E501
        :type: str
        """

        self._carrier_route = carrier_route

    @property
    def cass(self):
        """Gets the cass of this AddressViewResourceModel.  # noqa: E501


        :return: The cass of this AddressViewResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._cass

    @cass.setter
    def cass(self, cass):
        """Sets the cass of this AddressViewResourceModel.


        :param cass: The cass of this AddressViewResourceModel.  # noqa: E501
        :type: str
        """

        self._cass = cass

    @property
    def city(self):
        """Gets the city of this AddressViewResourceModel.  # noqa: E501


        :return: The city of this AddressViewResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this AddressViewResourceModel.


        :param city: The city of this AddressViewResourceModel.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def county(self):
        """Gets the county of this AddressViewResourceModel.  # noqa: E501


        :return: The county of this AddressViewResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this AddressViewResourceModel.


        :param county: The county of this AddressViewResourceModel.  # noqa: E501
        :type: str
        """

        self._county = county

    @property
    def dpbc(self):
        """Gets the dpbc of this AddressViewResourceModel.  # noqa: E501


        :return: The dpbc of this AddressViewResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._dpbc

    @dpbc.setter
    def dpbc(self, dpbc):
        """Sets the dpbc of this AddressViewResourceModel.


        :param dpbc: The dpbc of this AddressViewResourceModel.  # noqa: E501
        :type: str
        """

        self._dpbc = dpbc

    @property
    def latitude(self):
        """Gets the latitude of this AddressViewResourceModel.  # noqa: E501


        :return: The latitude of this AddressViewResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this AddressViewResourceModel.


        :param latitude: The latitude of this AddressViewResourceModel.  # noqa: E501
        :type: str
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this AddressViewResourceModel.  # noqa: E501


        :return: The longitude of this AddressViewResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this AddressViewResourceModel.


        :param longitude: The longitude of this AddressViewResourceModel.  # noqa: E501
        :type: str
        """

        self._longitude = longitude

    @property
    def address_line1(self):
        """Gets the address_line1 of this AddressViewResourceModel.  # noqa: E501


        :return: The address_line1 of this AddressViewResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this AddressViewResourceModel.


        :param address_line1: The address_line1 of this AddressViewResourceModel.  # noqa: E501
        :type: str
        """

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this AddressViewResourceModel.  # noqa: E501


        :return: The address_line2 of this AddressViewResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this AddressViewResourceModel.


        :param address_line2: The address_line2 of this AddressViewResourceModel.  # noqa: E501
        :type: str
        """

        self._address_line2 = address_line2

    @property
    def state(self):
        """Gets the state of this AddressViewResourceModel.  # noqa: E501


        :return: The state of this AddressViewResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AddressViewResourceModel.


        :param state: The state of this AddressViewResourceModel.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def zip(self):
        """Gets the zip of this AddressViewResourceModel.  # noqa: E501


        :return: The zip of this AddressViewResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this AddressViewResourceModel.


        :param zip: The zip of this AddressViewResourceModel.  # noqa: E501
        :type: str
        """

        self._zip = zip

    @property
    def zip4(self):
        """Gets the zip4 of this AddressViewResourceModel.  # noqa: E501


        :return: The zip4 of this AddressViewResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._zip4

    @zip4.setter
    def zip4(self, zip4):
        """Sets the zip4 of this AddressViewResourceModel.


        :param zip4: The zip4 of this AddressViewResourceModel.  # noqa: E501
        :type: str
        """

        self._zip4 = zip4

    @property
    def country(self):
        """Gets the country of this AddressViewResourceModel.  # noqa: E501


        :return: The country of this AddressViewResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AddressViewResourceModel.


        :param country: The country of this AddressViewResourceModel.  # noqa: E501
        :type: str
        """

        self._country = country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddressViewResourceModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddressViewResourceModel):
            return True

        return self.to_dict() != other.to_dict()
