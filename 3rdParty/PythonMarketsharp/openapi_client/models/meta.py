# coding: utf-8

"""
    MarketSharp CRM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Meta(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'errors': 'Errors',
        'http_status': 'str',
        'http_status_code': 'int',
        'paging_details': 'PagingDetails'
    }

    attribute_map = {
        'errors': 'errors',
        'http_status': 'httpStatus',
        'http_status_code': 'httpStatusCode',
        'paging_details': 'pagingDetails'
    }

    def __init__(self, errors=None, http_status=None, http_status_code=None, paging_details=None, local_vars_configuration=None):  # noqa: E501
        """Meta - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._errors = None
        self._http_status = None
        self._http_status_code = None
        self._paging_details = None
        self.discriminator = None

        if errors is not None:
            self.errors = errors
        if http_status is not None:
            self.http_status = http_status
        if http_status_code is not None:
            self.http_status_code = http_status_code
        if paging_details is not None:
            self.paging_details = paging_details

    @property
    def errors(self):
        """Gets the errors of this Meta.  # noqa: E501


        :return: The errors of this Meta.  # noqa: E501
        :rtype: Errors
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this Meta.


        :param errors: The errors of this Meta.  # noqa: E501
        :type: Errors
        """

        self._errors = errors

    @property
    def http_status(self):
        """Gets the http_status of this Meta.  # noqa: E501


        :return: The http_status of this Meta.  # noqa: E501
        :rtype: str
        """
        return self._http_status

    @http_status.setter
    def http_status(self, http_status):
        """Sets the http_status of this Meta.


        :param http_status: The http_status of this Meta.  # noqa: E501
        :type: str
        """

        self._http_status = http_status

    @property
    def http_status_code(self):
        """Gets the http_status_code of this Meta.  # noqa: E501


        :return: The http_status_code of this Meta.  # noqa: E501
        :rtype: int
        """
        return self._http_status_code

    @http_status_code.setter
    def http_status_code(self, http_status_code):
        """Sets the http_status_code of this Meta.


        :param http_status_code: The http_status_code of this Meta.  # noqa: E501
        :type: int
        """

        self._http_status_code = http_status_code

    @property
    def paging_details(self):
        """Gets the paging_details of this Meta.  # noqa: E501


        :return: The paging_details of this Meta.  # noqa: E501
        :rtype: PagingDetails
        """
        return self._paging_details

    @paging_details.setter
    def paging_details(self, paging_details):
        """Sets the paging_details of this Meta.


        :param paging_details: The paging_details of this Meta.  # noqa: E501
        :type: PagingDetails
        """

        self._paging_details = paging_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Meta):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Meta):
            return True

        return self.to_dict() != other.to_dict()
