# coding: utf-8

"""
    MarketSharp CRM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class UnlinkPaymentRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'company_id': 'str',
        'event_id': 'str',
        'contact_id': 'str',
        'pay_simple_customer_id': 'int',
        'payment_id': 'int',
        'employee_oid': 'str'
    }

    attribute_map = {
        'company_id': 'companyID',
        'event_id': 'eventID',
        'contact_id': 'contactID',
        'pay_simple_customer_id': 'paySimpleCustomerId',
        'payment_id': 'paymentId',
        'employee_oid': 'employeeOid'
    }

    def __init__(self, company_id=None, event_id=None, contact_id=None, pay_simple_customer_id=None, payment_id=None, employee_oid=None, local_vars_configuration=None):  # noqa: E501
        """UnlinkPaymentRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._company_id = None
        self._event_id = None
        self._contact_id = None
        self._pay_simple_customer_id = None
        self._payment_id = None
        self._employee_oid = None
        self.discriminator = None

        if company_id is not None:
            self.company_id = company_id
        if event_id is not None:
            self.event_id = event_id
        if contact_id is not None:
            self.contact_id = contact_id
        if pay_simple_customer_id is not None:
            self.pay_simple_customer_id = pay_simple_customer_id
        if payment_id is not None:
            self.payment_id = payment_id
        if employee_oid is not None:
            self.employee_oid = employee_oid

    @property
    def company_id(self):
        """Gets the company_id of this UnlinkPaymentRequest.  # noqa: E501


        :return: The company_id of this UnlinkPaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this UnlinkPaymentRequest.


        :param company_id: The company_id of this UnlinkPaymentRequest.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def event_id(self):
        """Gets the event_id of this UnlinkPaymentRequest.  # noqa: E501


        :return: The event_id of this UnlinkPaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this UnlinkPaymentRequest.


        :param event_id: The event_id of this UnlinkPaymentRequest.  # noqa: E501
        :type: str
        """

        self._event_id = event_id

    @property
    def contact_id(self):
        """Gets the contact_id of this UnlinkPaymentRequest.  # noqa: E501


        :return: The contact_id of this UnlinkPaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this UnlinkPaymentRequest.


        :param contact_id: The contact_id of this UnlinkPaymentRequest.  # noqa: E501
        :type: str
        """

        self._contact_id = contact_id

    @property
    def pay_simple_customer_id(self):
        """Gets the pay_simple_customer_id of this UnlinkPaymentRequest.  # noqa: E501


        :return: The pay_simple_customer_id of this UnlinkPaymentRequest.  # noqa: E501
        :rtype: int
        """
        return self._pay_simple_customer_id

    @pay_simple_customer_id.setter
    def pay_simple_customer_id(self, pay_simple_customer_id):
        """Sets the pay_simple_customer_id of this UnlinkPaymentRequest.


        :param pay_simple_customer_id: The pay_simple_customer_id of this UnlinkPaymentRequest.  # noqa: E501
        :type: int
        """

        self._pay_simple_customer_id = pay_simple_customer_id

    @property
    def payment_id(self):
        """Gets the payment_id of this UnlinkPaymentRequest.  # noqa: E501


        :return: The payment_id of this UnlinkPaymentRequest.  # noqa: E501
        :rtype: int
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this UnlinkPaymentRequest.


        :param payment_id: The payment_id of this UnlinkPaymentRequest.  # noqa: E501
        :type: int
        """

        self._payment_id = payment_id

    @property
    def employee_oid(self):
        """Gets the employee_oid of this UnlinkPaymentRequest.  # noqa: E501


        :return: The employee_oid of this UnlinkPaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._employee_oid

    @employee_oid.setter
    def employee_oid(self, employee_oid):
        """Sets the employee_oid of this UnlinkPaymentRequest.


        :param employee_oid: The employee_oid of this UnlinkPaymentRequest.  # noqa: E501
        :type: str
        """

        self._employee_oid = employee_oid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UnlinkPaymentRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UnlinkPaymentRequest):
            return True

        return self.to_dict() != other.to_dict()
