# coding: utf-8

"""
    MarketSharp CRM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ProductionResourceModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'custom_column_list': 'list[str]',
        'total_rows': 'int',
        'step_totals': 'list[ItemTotal]',
        'data_totals': 'list[ItemTotal]',
        'production_processes': 'list[ProductionDetail]'
    }

    attribute_map = {
        'custom_column_list': 'customColumnList',
        'total_rows': 'totalRows',
        'step_totals': 'stepTotals',
        'data_totals': 'dataTotals',
        'production_processes': 'productionProcesses'
    }

    def __init__(self, custom_column_list=None, total_rows=None, step_totals=None, data_totals=None, production_processes=None, local_vars_configuration=None):  # noqa: E501
        """ProductionResourceModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._custom_column_list = None
        self._total_rows = None
        self._step_totals = None
        self._data_totals = None
        self._production_processes = None
        self.discriminator = None

        if custom_column_list is not None:
            self.custom_column_list = custom_column_list
        if total_rows is not None:
            self.total_rows = total_rows
        if step_totals is not None:
            self.step_totals = step_totals
        if data_totals is not None:
            self.data_totals = data_totals
        if production_processes is not None:
            self.production_processes = production_processes

    @property
    def custom_column_list(self):
        """Gets the custom_column_list of this ProductionResourceModel.  # noqa: E501


        :return: The custom_column_list of this ProductionResourceModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._custom_column_list

    @custom_column_list.setter
    def custom_column_list(self, custom_column_list):
        """Sets the custom_column_list of this ProductionResourceModel.


        :param custom_column_list: The custom_column_list of this ProductionResourceModel.  # noqa: E501
        :type: list[str]
        """

        self._custom_column_list = custom_column_list

    @property
    def total_rows(self):
        """Gets the total_rows of this ProductionResourceModel.  # noqa: E501


        :return: The total_rows of this ProductionResourceModel.  # noqa: E501
        :rtype: int
        """
        return self._total_rows

    @total_rows.setter
    def total_rows(self, total_rows):
        """Sets the total_rows of this ProductionResourceModel.


        :param total_rows: The total_rows of this ProductionResourceModel.  # noqa: E501
        :type: int
        """

        self._total_rows = total_rows

    @property
    def step_totals(self):
        """Gets the step_totals of this ProductionResourceModel.  # noqa: E501


        :return: The step_totals of this ProductionResourceModel.  # noqa: E501
        :rtype: list[ItemTotal]
        """
        return self._step_totals

    @step_totals.setter
    def step_totals(self, step_totals):
        """Sets the step_totals of this ProductionResourceModel.


        :param step_totals: The step_totals of this ProductionResourceModel.  # noqa: E501
        :type: list[ItemTotal]
        """

        self._step_totals = step_totals

    @property
    def data_totals(self):
        """Gets the data_totals of this ProductionResourceModel.  # noqa: E501


        :return: The data_totals of this ProductionResourceModel.  # noqa: E501
        :rtype: list[ItemTotal]
        """
        return self._data_totals

    @data_totals.setter
    def data_totals(self, data_totals):
        """Sets the data_totals of this ProductionResourceModel.


        :param data_totals: The data_totals of this ProductionResourceModel.  # noqa: E501
        :type: list[ItemTotal]
        """

        self._data_totals = data_totals

    @property
    def production_processes(self):
        """Gets the production_processes of this ProductionResourceModel.  # noqa: E501


        :return: The production_processes of this ProductionResourceModel.  # noqa: E501
        :rtype: list[ProductionDetail]
        """
        return self._production_processes

    @production_processes.setter
    def production_processes(self, production_processes):
        """Sets the production_processes of this ProductionResourceModel.


        :param production_processes: The production_processes of this ProductionResourceModel.  # noqa: E501
        :type: list[ProductionDetail]
        """

        self._production_processes = production_processes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductionResourceModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProductionResourceModel):
            return True

        return self.to_dict() != other.to_dict()
