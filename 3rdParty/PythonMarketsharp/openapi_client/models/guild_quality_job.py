# coding: utf-8

"""
    MarketSharp CRM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class GuildQualityJob(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'guild_quality_account_id': 'str',
        'unique_job_id': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'mailing_address_line1': 'str',
        'mailing_address_line2': 'str',
        'mailing_address_city': 'str',
        'mailing_address_state': 'str',
        'mailing_address_zip': 'str',
        'primary_email': 'str',
        'secondary_email': 'str',
        'home_phone': 'str',
        'cell_phone': 'str',
        'primary_lead_source': 'str',
        'product_salespeople': 'str',
        'project_types': 'str',
        'project_managers': 'str',
        'work_crews': 'str',
        'workers': 'str',
        'survey_queue_date': 'datetime'
    }

    attribute_map = {
        'guild_quality_account_id': 'guildQualityAccountId',
        'unique_job_id': 'uniqueJobId',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'mailing_address_line1': 'mailingAddressLine1',
        'mailing_address_line2': 'mailingAddressLine2',
        'mailing_address_city': 'mailingAddressCity',
        'mailing_address_state': 'mailingAddressState',
        'mailing_address_zip': 'mailingAddressZip',
        'primary_email': 'primaryEmail',
        'secondary_email': 'secondaryEmail',
        'home_phone': 'homePhone',
        'cell_phone': 'cellPhone',
        'primary_lead_source': 'primaryLeadSource',
        'product_salespeople': 'productSalespeople',
        'project_types': 'projectTypes',
        'project_managers': 'projectManagers',
        'work_crews': 'workCrews',
        'workers': 'workers',
        'survey_queue_date': 'surveyQueueDate'
    }

    def __init__(self, guild_quality_account_id=None, unique_job_id=None, first_name=None, last_name=None, mailing_address_line1=None, mailing_address_line2=None, mailing_address_city=None, mailing_address_state=None, mailing_address_zip=None, primary_email=None, secondary_email=None, home_phone=None, cell_phone=None, primary_lead_source=None, product_salespeople=None, project_types=None, project_managers=None, work_crews=None, workers=None, survey_queue_date=None, local_vars_configuration=None):  # noqa: E501
        """GuildQualityJob - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._guild_quality_account_id = None
        self._unique_job_id = None
        self._first_name = None
        self._last_name = None
        self._mailing_address_line1 = None
        self._mailing_address_line2 = None
        self._mailing_address_city = None
        self._mailing_address_state = None
        self._mailing_address_zip = None
        self._primary_email = None
        self._secondary_email = None
        self._home_phone = None
        self._cell_phone = None
        self._primary_lead_source = None
        self._product_salespeople = None
        self._project_types = None
        self._project_managers = None
        self._work_crews = None
        self._workers = None
        self._survey_queue_date = None
        self.discriminator = None

        if guild_quality_account_id is not None:
            self.guild_quality_account_id = guild_quality_account_id
        if unique_job_id is not None:
            self.unique_job_id = unique_job_id
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if mailing_address_line1 is not None:
            self.mailing_address_line1 = mailing_address_line1
        if mailing_address_line2 is not None:
            self.mailing_address_line2 = mailing_address_line2
        if mailing_address_city is not None:
            self.mailing_address_city = mailing_address_city
        if mailing_address_state is not None:
            self.mailing_address_state = mailing_address_state
        if mailing_address_zip is not None:
            self.mailing_address_zip = mailing_address_zip
        if primary_email is not None:
            self.primary_email = primary_email
        if secondary_email is not None:
            self.secondary_email = secondary_email
        if home_phone is not None:
            self.home_phone = home_phone
        if cell_phone is not None:
            self.cell_phone = cell_phone
        if primary_lead_source is not None:
            self.primary_lead_source = primary_lead_source
        if product_salespeople is not None:
            self.product_salespeople = product_salespeople
        if project_types is not None:
            self.project_types = project_types
        if project_managers is not None:
            self.project_managers = project_managers
        if work_crews is not None:
            self.work_crews = work_crews
        if workers is not None:
            self.workers = workers
        if survey_queue_date is not None:
            self.survey_queue_date = survey_queue_date

    @property
    def guild_quality_account_id(self):
        """Gets the guild_quality_account_id of this GuildQualityJob.  # noqa: E501


        :return: The guild_quality_account_id of this GuildQualityJob.  # noqa: E501
        :rtype: str
        """
        return self._guild_quality_account_id

    @guild_quality_account_id.setter
    def guild_quality_account_id(self, guild_quality_account_id):
        """Sets the guild_quality_account_id of this GuildQualityJob.


        :param guild_quality_account_id: The guild_quality_account_id of this GuildQualityJob.  # noqa: E501
        :type: str
        """

        self._guild_quality_account_id = guild_quality_account_id

    @property
    def unique_job_id(self):
        """Gets the unique_job_id of this GuildQualityJob.  # noqa: E501


        :return: The unique_job_id of this GuildQualityJob.  # noqa: E501
        :rtype: str
        """
        return self._unique_job_id

    @unique_job_id.setter
    def unique_job_id(self, unique_job_id):
        """Sets the unique_job_id of this GuildQualityJob.


        :param unique_job_id: The unique_job_id of this GuildQualityJob.  # noqa: E501
        :type: str
        """

        self._unique_job_id = unique_job_id

    @property
    def first_name(self):
        """Gets the first_name of this GuildQualityJob.  # noqa: E501


        :return: The first_name of this GuildQualityJob.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this GuildQualityJob.


        :param first_name: The first_name of this GuildQualityJob.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this GuildQualityJob.  # noqa: E501


        :return: The last_name of this GuildQualityJob.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this GuildQualityJob.


        :param last_name: The last_name of this GuildQualityJob.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def mailing_address_line1(self):
        """Gets the mailing_address_line1 of this GuildQualityJob.  # noqa: E501


        :return: The mailing_address_line1 of this GuildQualityJob.  # noqa: E501
        :rtype: str
        """
        return self._mailing_address_line1

    @mailing_address_line1.setter
    def mailing_address_line1(self, mailing_address_line1):
        """Sets the mailing_address_line1 of this GuildQualityJob.


        :param mailing_address_line1: The mailing_address_line1 of this GuildQualityJob.  # noqa: E501
        :type: str
        """

        self._mailing_address_line1 = mailing_address_line1

    @property
    def mailing_address_line2(self):
        """Gets the mailing_address_line2 of this GuildQualityJob.  # noqa: E501


        :return: The mailing_address_line2 of this GuildQualityJob.  # noqa: E501
        :rtype: str
        """
        return self._mailing_address_line2

    @mailing_address_line2.setter
    def mailing_address_line2(self, mailing_address_line2):
        """Sets the mailing_address_line2 of this GuildQualityJob.


        :param mailing_address_line2: The mailing_address_line2 of this GuildQualityJob.  # noqa: E501
        :type: str
        """

        self._mailing_address_line2 = mailing_address_line2

    @property
    def mailing_address_city(self):
        """Gets the mailing_address_city of this GuildQualityJob.  # noqa: E501


        :return: The mailing_address_city of this GuildQualityJob.  # noqa: E501
        :rtype: str
        """
        return self._mailing_address_city

    @mailing_address_city.setter
    def mailing_address_city(self, mailing_address_city):
        """Sets the mailing_address_city of this GuildQualityJob.


        :param mailing_address_city: The mailing_address_city of this GuildQualityJob.  # noqa: E501
        :type: str
        """

        self._mailing_address_city = mailing_address_city

    @property
    def mailing_address_state(self):
        """Gets the mailing_address_state of this GuildQualityJob.  # noqa: E501


        :return: The mailing_address_state of this GuildQualityJob.  # noqa: E501
        :rtype: str
        """
        return self._mailing_address_state

    @mailing_address_state.setter
    def mailing_address_state(self, mailing_address_state):
        """Sets the mailing_address_state of this GuildQualityJob.


        :param mailing_address_state: The mailing_address_state of this GuildQualityJob.  # noqa: E501
        :type: str
        """

        self._mailing_address_state = mailing_address_state

    @property
    def mailing_address_zip(self):
        """Gets the mailing_address_zip of this GuildQualityJob.  # noqa: E501


        :return: The mailing_address_zip of this GuildQualityJob.  # noqa: E501
        :rtype: str
        """
        return self._mailing_address_zip

    @mailing_address_zip.setter
    def mailing_address_zip(self, mailing_address_zip):
        """Sets the mailing_address_zip of this GuildQualityJob.


        :param mailing_address_zip: The mailing_address_zip of this GuildQualityJob.  # noqa: E501
        :type: str
        """

        self._mailing_address_zip = mailing_address_zip

    @property
    def primary_email(self):
        """Gets the primary_email of this GuildQualityJob.  # noqa: E501


        :return: The primary_email of this GuildQualityJob.  # noqa: E501
        :rtype: str
        """
        return self._primary_email

    @primary_email.setter
    def primary_email(self, primary_email):
        """Sets the primary_email of this GuildQualityJob.


        :param primary_email: The primary_email of this GuildQualityJob.  # noqa: E501
        :type: str
        """

        self._primary_email = primary_email

    @property
    def secondary_email(self):
        """Gets the secondary_email of this GuildQualityJob.  # noqa: E501


        :return: The secondary_email of this GuildQualityJob.  # noqa: E501
        :rtype: str
        """
        return self._secondary_email

    @secondary_email.setter
    def secondary_email(self, secondary_email):
        """Sets the secondary_email of this GuildQualityJob.


        :param secondary_email: The secondary_email of this GuildQualityJob.  # noqa: E501
        :type: str
        """

        self._secondary_email = secondary_email

    @property
    def home_phone(self):
        """Gets the home_phone of this GuildQualityJob.  # noqa: E501


        :return: The home_phone of this GuildQualityJob.  # noqa: E501
        :rtype: str
        """
        return self._home_phone

    @home_phone.setter
    def home_phone(self, home_phone):
        """Sets the home_phone of this GuildQualityJob.


        :param home_phone: The home_phone of this GuildQualityJob.  # noqa: E501
        :type: str
        """

        self._home_phone = home_phone

    @property
    def cell_phone(self):
        """Gets the cell_phone of this GuildQualityJob.  # noqa: E501


        :return: The cell_phone of this GuildQualityJob.  # noqa: E501
        :rtype: str
        """
        return self._cell_phone

    @cell_phone.setter
    def cell_phone(self, cell_phone):
        """Sets the cell_phone of this GuildQualityJob.


        :param cell_phone: The cell_phone of this GuildQualityJob.  # noqa: E501
        :type: str
        """

        self._cell_phone = cell_phone

    @property
    def primary_lead_source(self):
        """Gets the primary_lead_source of this GuildQualityJob.  # noqa: E501


        :return: The primary_lead_source of this GuildQualityJob.  # noqa: E501
        :rtype: str
        """
        return self._primary_lead_source

    @primary_lead_source.setter
    def primary_lead_source(self, primary_lead_source):
        """Sets the primary_lead_source of this GuildQualityJob.


        :param primary_lead_source: The primary_lead_source of this GuildQualityJob.  # noqa: E501
        :type: str
        """

        self._primary_lead_source = primary_lead_source

    @property
    def product_salespeople(self):
        """Gets the product_salespeople of this GuildQualityJob.  # noqa: E501


        :return: The product_salespeople of this GuildQualityJob.  # noqa: E501
        :rtype: str
        """
        return self._product_salespeople

    @product_salespeople.setter
    def product_salespeople(self, product_salespeople):
        """Sets the product_salespeople of this GuildQualityJob.


        :param product_salespeople: The product_salespeople of this GuildQualityJob.  # noqa: E501
        :type: str
        """

        self._product_salespeople = product_salespeople

    @property
    def project_types(self):
        """Gets the project_types of this GuildQualityJob.  # noqa: E501


        :return: The project_types of this GuildQualityJob.  # noqa: E501
        :rtype: str
        """
        return self._project_types

    @project_types.setter
    def project_types(self, project_types):
        """Sets the project_types of this GuildQualityJob.


        :param project_types: The project_types of this GuildQualityJob.  # noqa: E501
        :type: str
        """

        self._project_types = project_types

    @property
    def project_managers(self):
        """Gets the project_managers of this GuildQualityJob.  # noqa: E501


        :return: The project_managers of this GuildQualityJob.  # noqa: E501
        :rtype: str
        """
        return self._project_managers

    @project_managers.setter
    def project_managers(self, project_managers):
        """Sets the project_managers of this GuildQualityJob.


        :param project_managers: The project_managers of this GuildQualityJob.  # noqa: E501
        :type: str
        """

        self._project_managers = project_managers

    @property
    def work_crews(self):
        """Gets the work_crews of this GuildQualityJob.  # noqa: E501


        :return: The work_crews of this GuildQualityJob.  # noqa: E501
        :rtype: str
        """
        return self._work_crews

    @work_crews.setter
    def work_crews(self, work_crews):
        """Sets the work_crews of this GuildQualityJob.


        :param work_crews: The work_crews of this GuildQualityJob.  # noqa: E501
        :type: str
        """

        self._work_crews = work_crews

    @property
    def workers(self):
        """Gets the workers of this GuildQualityJob.  # noqa: E501


        :return: The workers of this GuildQualityJob.  # noqa: E501
        :rtype: str
        """
        return self._workers

    @workers.setter
    def workers(self, workers):
        """Sets the workers of this GuildQualityJob.


        :param workers: The workers of this GuildQualityJob.  # noqa: E501
        :type: str
        """

        self._workers = workers

    @property
    def survey_queue_date(self):
        """Gets the survey_queue_date of this GuildQualityJob.  # noqa: E501


        :return: The survey_queue_date of this GuildQualityJob.  # noqa: E501
        :rtype: datetime
        """
        return self._survey_queue_date

    @survey_queue_date.setter
    def survey_queue_date(self, survey_queue_date):
        """Sets the survey_queue_date of this GuildQualityJob.


        :param survey_queue_date: The survey_queue_date of this GuildQualityJob.  # noqa: E501
        :type: datetime
        """

        self._survey_queue_date = survey_queue_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GuildQualityJob):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GuildQualityJob):
            return True

        return self.to_dict() != other.to_dict()
