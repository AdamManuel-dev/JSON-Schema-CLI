# coding: utf-8

"""
    MarketSharp CRM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class MerchantOptionsResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'accepts_credit_card': 'bool',
        'accepts_ach': 'bool',
        'credit_card_issuers': 'list[str]'
    }

    attribute_map = {
        'accepts_credit_card': 'acceptsCreditCard',
        'accepts_ach': 'acceptsAch',
        'credit_card_issuers': 'creditCardIssuers'
    }

    def __init__(self, accepts_credit_card=None, accepts_ach=None, credit_card_issuers=None, local_vars_configuration=None):  # noqa: E501
        """MerchantOptionsResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._accepts_credit_card = None
        self._accepts_ach = None
        self._credit_card_issuers = None
        self.discriminator = None

        if accepts_credit_card is not None:
            self.accepts_credit_card = accepts_credit_card
        if accepts_ach is not None:
            self.accepts_ach = accepts_ach
        if credit_card_issuers is not None:
            self.credit_card_issuers = credit_card_issuers

    @property
    def accepts_credit_card(self):
        """Gets the accepts_credit_card of this MerchantOptionsResponse.  # noqa: E501


        :return: The accepts_credit_card of this MerchantOptionsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._accepts_credit_card

    @accepts_credit_card.setter
    def accepts_credit_card(self, accepts_credit_card):
        """Sets the accepts_credit_card of this MerchantOptionsResponse.


        :param accepts_credit_card: The accepts_credit_card of this MerchantOptionsResponse.  # noqa: E501
        :type: bool
        """

        self._accepts_credit_card = accepts_credit_card

    @property
    def accepts_ach(self):
        """Gets the accepts_ach of this MerchantOptionsResponse.  # noqa: E501


        :return: The accepts_ach of this MerchantOptionsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._accepts_ach

    @accepts_ach.setter
    def accepts_ach(self, accepts_ach):
        """Sets the accepts_ach of this MerchantOptionsResponse.


        :param accepts_ach: The accepts_ach of this MerchantOptionsResponse.  # noqa: E501
        :type: bool
        """

        self._accepts_ach = accepts_ach

    @property
    def credit_card_issuers(self):
        """Gets the credit_card_issuers of this MerchantOptionsResponse.  # noqa: E501


        :return: The credit_card_issuers of this MerchantOptionsResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._credit_card_issuers

    @credit_card_issuers.setter
    def credit_card_issuers(self, credit_card_issuers):
        """Sets the credit_card_issuers of this MerchantOptionsResponse.


        :param credit_card_issuers: The credit_card_issuers of this MerchantOptionsResponse.  # noqa: E501
        :type: list[str]
        """

        self._credit_card_issuers = credit_card_issuers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MerchantOptionsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MerchantOptionsResponse):
            return True

        return self.to_dict() != other.to_dict()
