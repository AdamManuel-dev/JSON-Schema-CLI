# coding: utf-8

"""
    MarketSharp CRM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PaymentResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'customer_id': 'int',
        'customer_first_name': 'str',
        'customer_last_name': 'str',
        'customer_company': 'str',
        'reference_id': 'int',
        'status': 'str',
        'recurring_schedule_id': 'int',
        'payment_type': 'str',
        'payment_sub_type': 'str',
        'provider_auth_code': 'str',
        'trace_number': 'str',
        'payment_date': 'str',
        'return_date': 'str',
        'estimated_settle_date': 'str',
        'actual_settled_date': 'str',
        'can_void_until': 'str',
        'failure_data': 'FailureData',
        'account_id': 'int',
        'invoice_id': 'str',
        'amount': 'float',
        'is_debit': 'bool',
        'invoice_number': 'int',
        'purchase_order_number': 'int',
        'order_id': 'str',
        'description': 'str',
        'latitude': 'str',
        'longitude': 'str',
        'success_receipt_options': 'str',
        'failure_receipt_options': 'str',
        'id': 'int',
        'last_modified': 'str',
        'created_on': 'str'
    }

    attribute_map = {
        'customer_id': 'customerId',
        'customer_first_name': 'customerFirstName',
        'customer_last_name': 'customerLastName',
        'customer_company': 'customerCompany',
        'reference_id': 'referenceId',
        'status': 'status',
        'recurring_schedule_id': 'recurringScheduleId',
        'payment_type': 'paymentType',
        'payment_sub_type': 'paymentSubType',
        'provider_auth_code': 'providerAuthCode',
        'trace_number': 'traceNumber',
        'payment_date': 'paymentDate',
        'return_date': 'returnDate',
        'estimated_settle_date': 'estimatedSettleDate',
        'actual_settled_date': 'actualSettledDate',
        'can_void_until': 'canVoidUntil',
        'failure_data': 'failureData',
        'account_id': 'accountId',
        'invoice_id': 'invoiceId',
        'amount': 'amount',
        'is_debit': 'isDebit',
        'invoice_number': 'invoiceNumber',
        'purchase_order_number': 'purchaseOrderNumber',
        'order_id': 'orderId',
        'description': 'description',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'success_receipt_options': 'successReceiptOptions',
        'failure_receipt_options': 'failureReceiptOptions',
        'id': 'id',
        'last_modified': 'lastModified',
        'created_on': 'createdOn'
    }

    def __init__(self, customer_id=None, customer_first_name=None, customer_last_name=None, customer_company=None, reference_id=None, status=None, recurring_schedule_id=None, payment_type=None, payment_sub_type=None, provider_auth_code=None, trace_number=None, payment_date=None, return_date=None, estimated_settle_date=None, actual_settled_date=None, can_void_until=None, failure_data=None, account_id=None, invoice_id=None, amount=None, is_debit=None, invoice_number=None, purchase_order_number=None, order_id=None, description=None, latitude=None, longitude=None, success_receipt_options=None, failure_receipt_options=None, id=None, last_modified=None, created_on=None, local_vars_configuration=None):  # noqa: E501
        """PaymentResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._customer_id = None
        self._customer_first_name = None
        self._customer_last_name = None
        self._customer_company = None
        self._reference_id = None
        self._status = None
        self._recurring_schedule_id = None
        self._payment_type = None
        self._payment_sub_type = None
        self._provider_auth_code = None
        self._trace_number = None
        self._payment_date = None
        self._return_date = None
        self._estimated_settle_date = None
        self._actual_settled_date = None
        self._can_void_until = None
        self._failure_data = None
        self._account_id = None
        self._invoice_id = None
        self._amount = None
        self._is_debit = None
        self._invoice_number = None
        self._purchase_order_number = None
        self._order_id = None
        self._description = None
        self._latitude = None
        self._longitude = None
        self._success_receipt_options = None
        self._failure_receipt_options = None
        self._id = None
        self._last_modified = None
        self._created_on = None
        self.discriminator = None

        if customer_id is not None:
            self.customer_id = customer_id
        if customer_first_name is not None:
            self.customer_first_name = customer_first_name
        if customer_last_name is not None:
            self.customer_last_name = customer_last_name
        if customer_company is not None:
            self.customer_company = customer_company
        if reference_id is not None:
            self.reference_id = reference_id
        if status is not None:
            self.status = status
        if recurring_schedule_id is not None:
            self.recurring_schedule_id = recurring_schedule_id
        if payment_type is not None:
            self.payment_type = payment_type
        if payment_sub_type is not None:
            self.payment_sub_type = payment_sub_type
        if provider_auth_code is not None:
            self.provider_auth_code = provider_auth_code
        if trace_number is not None:
            self.trace_number = trace_number
        if payment_date is not None:
            self.payment_date = payment_date
        if return_date is not None:
            self.return_date = return_date
        if estimated_settle_date is not None:
            self.estimated_settle_date = estimated_settle_date
        if actual_settled_date is not None:
            self.actual_settled_date = actual_settled_date
        if can_void_until is not None:
            self.can_void_until = can_void_until
        if failure_data is not None:
            self.failure_data = failure_data
        if account_id is not None:
            self.account_id = account_id
        if invoice_id is not None:
            self.invoice_id = invoice_id
        if amount is not None:
            self.amount = amount
        if is_debit is not None:
            self.is_debit = is_debit
        if invoice_number is not None:
            self.invoice_number = invoice_number
        if purchase_order_number is not None:
            self.purchase_order_number = purchase_order_number
        if order_id is not None:
            self.order_id = order_id
        if description is not None:
            self.description = description
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if success_receipt_options is not None:
            self.success_receipt_options = success_receipt_options
        if failure_receipt_options is not None:
            self.failure_receipt_options = failure_receipt_options
        if id is not None:
            self.id = id
        if last_modified is not None:
            self.last_modified = last_modified
        if created_on is not None:
            self.created_on = created_on

    @property
    def customer_id(self):
        """Gets the customer_id of this PaymentResponse.  # noqa: E501


        :return: The customer_id of this PaymentResponse.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this PaymentResponse.


        :param customer_id: The customer_id of this PaymentResponse.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    @property
    def customer_first_name(self):
        """Gets the customer_first_name of this PaymentResponse.  # noqa: E501


        :return: The customer_first_name of this PaymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._customer_first_name

    @customer_first_name.setter
    def customer_first_name(self, customer_first_name):
        """Sets the customer_first_name of this PaymentResponse.


        :param customer_first_name: The customer_first_name of this PaymentResponse.  # noqa: E501
        :type: str
        """

        self._customer_first_name = customer_first_name

    @property
    def customer_last_name(self):
        """Gets the customer_last_name of this PaymentResponse.  # noqa: E501


        :return: The customer_last_name of this PaymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._customer_last_name

    @customer_last_name.setter
    def customer_last_name(self, customer_last_name):
        """Sets the customer_last_name of this PaymentResponse.


        :param customer_last_name: The customer_last_name of this PaymentResponse.  # noqa: E501
        :type: str
        """

        self._customer_last_name = customer_last_name

    @property
    def customer_company(self):
        """Gets the customer_company of this PaymentResponse.  # noqa: E501


        :return: The customer_company of this PaymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._customer_company

    @customer_company.setter
    def customer_company(self, customer_company):
        """Sets the customer_company of this PaymentResponse.


        :param customer_company: The customer_company of this PaymentResponse.  # noqa: E501
        :type: str
        """

        self._customer_company = customer_company

    @property
    def reference_id(self):
        """Gets the reference_id of this PaymentResponse.  # noqa: E501


        :return: The reference_id of this PaymentResponse.  # noqa: E501
        :rtype: int
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this PaymentResponse.


        :param reference_id: The reference_id of this PaymentResponse.  # noqa: E501
        :type: int
        """

        self._reference_id = reference_id

    @property
    def status(self):
        """Gets the status of this PaymentResponse.  # noqa: E501


        :return: The status of this PaymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PaymentResponse.


        :param status: The status of this PaymentResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def recurring_schedule_id(self):
        """Gets the recurring_schedule_id of this PaymentResponse.  # noqa: E501


        :return: The recurring_schedule_id of this PaymentResponse.  # noqa: E501
        :rtype: int
        """
        return self._recurring_schedule_id

    @recurring_schedule_id.setter
    def recurring_schedule_id(self, recurring_schedule_id):
        """Sets the recurring_schedule_id of this PaymentResponse.


        :param recurring_schedule_id: The recurring_schedule_id of this PaymentResponse.  # noqa: E501
        :type: int
        """

        self._recurring_schedule_id = recurring_schedule_id

    @property
    def payment_type(self):
        """Gets the payment_type of this PaymentResponse.  # noqa: E501


        :return: The payment_type of this PaymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this PaymentResponse.


        :param payment_type: The payment_type of this PaymentResponse.  # noqa: E501
        :type: str
        """

        self._payment_type = payment_type

    @property
    def payment_sub_type(self):
        """Gets the payment_sub_type of this PaymentResponse.  # noqa: E501


        :return: The payment_sub_type of this PaymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._payment_sub_type

    @payment_sub_type.setter
    def payment_sub_type(self, payment_sub_type):
        """Sets the payment_sub_type of this PaymentResponse.


        :param payment_sub_type: The payment_sub_type of this PaymentResponse.  # noqa: E501
        :type: str
        """

        self._payment_sub_type = payment_sub_type

    @property
    def provider_auth_code(self):
        """Gets the provider_auth_code of this PaymentResponse.  # noqa: E501


        :return: The provider_auth_code of this PaymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._provider_auth_code

    @provider_auth_code.setter
    def provider_auth_code(self, provider_auth_code):
        """Sets the provider_auth_code of this PaymentResponse.


        :param provider_auth_code: The provider_auth_code of this PaymentResponse.  # noqa: E501
        :type: str
        """

        self._provider_auth_code = provider_auth_code

    @property
    def trace_number(self):
        """Gets the trace_number of this PaymentResponse.  # noqa: E501


        :return: The trace_number of this PaymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._trace_number

    @trace_number.setter
    def trace_number(self, trace_number):
        """Sets the trace_number of this PaymentResponse.


        :param trace_number: The trace_number of this PaymentResponse.  # noqa: E501
        :type: str
        """

        self._trace_number = trace_number

    @property
    def payment_date(self):
        """Gets the payment_date of this PaymentResponse.  # noqa: E501


        :return: The payment_date of this PaymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._payment_date

    @payment_date.setter
    def payment_date(self, payment_date):
        """Sets the payment_date of this PaymentResponse.


        :param payment_date: The payment_date of this PaymentResponse.  # noqa: E501
        :type: str
        """

        self._payment_date = payment_date

    @property
    def return_date(self):
        """Gets the return_date of this PaymentResponse.  # noqa: E501


        :return: The return_date of this PaymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._return_date

    @return_date.setter
    def return_date(self, return_date):
        """Sets the return_date of this PaymentResponse.


        :param return_date: The return_date of this PaymentResponse.  # noqa: E501
        :type: str
        """

        self._return_date = return_date

    @property
    def estimated_settle_date(self):
        """Gets the estimated_settle_date of this PaymentResponse.  # noqa: E501


        :return: The estimated_settle_date of this PaymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._estimated_settle_date

    @estimated_settle_date.setter
    def estimated_settle_date(self, estimated_settle_date):
        """Sets the estimated_settle_date of this PaymentResponse.


        :param estimated_settle_date: The estimated_settle_date of this PaymentResponse.  # noqa: E501
        :type: str
        """

        self._estimated_settle_date = estimated_settle_date

    @property
    def actual_settled_date(self):
        """Gets the actual_settled_date of this PaymentResponse.  # noqa: E501


        :return: The actual_settled_date of this PaymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._actual_settled_date

    @actual_settled_date.setter
    def actual_settled_date(self, actual_settled_date):
        """Sets the actual_settled_date of this PaymentResponse.


        :param actual_settled_date: The actual_settled_date of this PaymentResponse.  # noqa: E501
        :type: str
        """

        self._actual_settled_date = actual_settled_date

    @property
    def can_void_until(self):
        """Gets the can_void_until of this PaymentResponse.  # noqa: E501


        :return: The can_void_until of this PaymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._can_void_until

    @can_void_until.setter
    def can_void_until(self, can_void_until):
        """Sets the can_void_until of this PaymentResponse.


        :param can_void_until: The can_void_until of this PaymentResponse.  # noqa: E501
        :type: str
        """

        self._can_void_until = can_void_until

    @property
    def failure_data(self):
        """Gets the failure_data of this PaymentResponse.  # noqa: E501


        :return: The failure_data of this PaymentResponse.  # noqa: E501
        :rtype: FailureData
        """
        return self._failure_data

    @failure_data.setter
    def failure_data(self, failure_data):
        """Sets the failure_data of this PaymentResponse.


        :param failure_data: The failure_data of this PaymentResponse.  # noqa: E501
        :type: FailureData
        """

        self._failure_data = failure_data

    @property
    def account_id(self):
        """Gets the account_id of this PaymentResponse.  # noqa: E501


        :return: The account_id of this PaymentResponse.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this PaymentResponse.


        :param account_id: The account_id of this PaymentResponse.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def invoice_id(self):
        """Gets the invoice_id of this PaymentResponse.  # noqa: E501


        :return: The invoice_id of this PaymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this PaymentResponse.


        :param invoice_id: The invoice_id of this PaymentResponse.  # noqa: E501
        :type: str
        """

        self._invoice_id = invoice_id

    @property
    def amount(self):
        """Gets the amount of this PaymentResponse.  # noqa: E501


        :return: The amount of this PaymentResponse.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentResponse.


        :param amount: The amount of this PaymentResponse.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def is_debit(self):
        """Gets the is_debit of this PaymentResponse.  # noqa: E501


        :return: The is_debit of this PaymentResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_debit

    @is_debit.setter
    def is_debit(self, is_debit):
        """Sets the is_debit of this PaymentResponse.


        :param is_debit: The is_debit of this PaymentResponse.  # noqa: E501
        :type: bool
        """

        self._is_debit = is_debit

    @property
    def invoice_number(self):
        """Gets the invoice_number of this PaymentResponse.  # noqa: E501


        :return: The invoice_number of this PaymentResponse.  # noqa: E501
        :rtype: int
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this PaymentResponse.


        :param invoice_number: The invoice_number of this PaymentResponse.  # noqa: E501
        :type: int
        """

        self._invoice_number = invoice_number

    @property
    def purchase_order_number(self):
        """Gets the purchase_order_number of this PaymentResponse.  # noqa: E501


        :return: The purchase_order_number of this PaymentResponse.  # noqa: E501
        :rtype: int
        """
        return self._purchase_order_number

    @purchase_order_number.setter
    def purchase_order_number(self, purchase_order_number):
        """Sets the purchase_order_number of this PaymentResponse.


        :param purchase_order_number: The purchase_order_number of this PaymentResponse.  # noqa: E501
        :type: int
        """

        self._purchase_order_number = purchase_order_number

    @property
    def order_id(self):
        """Gets the order_id of this PaymentResponse.  # noqa: E501


        :return: The order_id of this PaymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this PaymentResponse.


        :param order_id: The order_id of this PaymentResponse.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def description(self):
        """Gets the description of this PaymentResponse.  # noqa: E501


        :return: The description of this PaymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PaymentResponse.


        :param description: The description of this PaymentResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def latitude(self):
        """Gets the latitude of this PaymentResponse.  # noqa: E501


        :return: The latitude of this PaymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this PaymentResponse.


        :param latitude: The latitude of this PaymentResponse.  # noqa: E501
        :type: str
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this PaymentResponse.  # noqa: E501


        :return: The longitude of this PaymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this PaymentResponse.


        :param longitude: The longitude of this PaymentResponse.  # noqa: E501
        :type: str
        """

        self._longitude = longitude

    @property
    def success_receipt_options(self):
        """Gets the success_receipt_options of this PaymentResponse.  # noqa: E501


        :return: The success_receipt_options of this PaymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._success_receipt_options

    @success_receipt_options.setter
    def success_receipt_options(self, success_receipt_options):
        """Sets the success_receipt_options of this PaymentResponse.


        :param success_receipt_options: The success_receipt_options of this PaymentResponse.  # noqa: E501
        :type: str
        """

        self._success_receipt_options = success_receipt_options

    @property
    def failure_receipt_options(self):
        """Gets the failure_receipt_options of this PaymentResponse.  # noqa: E501


        :return: The failure_receipt_options of this PaymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._failure_receipt_options

    @failure_receipt_options.setter
    def failure_receipt_options(self, failure_receipt_options):
        """Sets the failure_receipt_options of this PaymentResponse.


        :param failure_receipt_options: The failure_receipt_options of this PaymentResponse.  # noqa: E501
        :type: str
        """

        self._failure_receipt_options = failure_receipt_options

    @property
    def id(self):
        """Gets the id of this PaymentResponse.  # noqa: E501


        :return: The id of this PaymentResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PaymentResponse.


        :param id: The id of this PaymentResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def last_modified(self):
        """Gets the last_modified of this PaymentResponse.  # noqa: E501


        :return: The last_modified of this PaymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this PaymentResponse.


        :param last_modified: The last_modified of this PaymentResponse.  # noqa: E501
        :type: str
        """

        self._last_modified = last_modified

    @property
    def created_on(self):
        """Gets the created_on of this PaymentResponse.  # noqa: E501


        :return: The created_on of this PaymentResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this PaymentResponse.


        :param created_on: The created_on of this PaymentResponse.  # noqa: E501
        :type: str
        """

        self._created_on = created_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PaymentResponse):
            return True

        return self.to_dict() != other.to_dict()
