# coding: utf-8

"""
    MarketSharp CRM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ProductionJobProductBindingModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'product_completed_date': 'datetime',
        'work_crew_id': 'str',
        'project_manager_id': 'str',
        'product_production_notes': 'str',
        'product_process_type_id': 'str',
        'step_list': 'list[ProductionStepBindingModel]',
        'employee_id_product_worker_list': 'list[str]',
        'steps_to_delete': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'product_completed_date': 'productCompletedDate',
        'work_crew_id': 'workCrewId',
        'project_manager_id': 'projectManagerId',
        'product_production_notes': 'productProductionNotes',
        'product_process_type_id': 'productProcessTypeId',
        'step_list': 'stepList',
        'employee_id_product_worker_list': 'employeeIdProductWorkerList',
        'steps_to_delete': 'stepsToDelete'
    }

    def __init__(self, id=None, product_completed_date=None, work_crew_id=None, project_manager_id=None, product_production_notes=None, product_process_type_id=None, step_list=None, employee_id_product_worker_list=None, steps_to_delete=None, local_vars_configuration=None):  # noqa: E501
        """ProductionJobProductBindingModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._product_completed_date = None
        self._work_crew_id = None
        self._project_manager_id = None
        self._product_production_notes = None
        self._product_process_type_id = None
        self._step_list = None
        self._employee_id_product_worker_list = None
        self._steps_to_delete = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if product_completed_date is not None:
            self.product_completed_date = product_completed_date
        if work_crew_id is not None:
            self.work_crew_id = work_crew_id
        if project_manager_id is not None:
            self.project_manager_id = project_manager_id
        if product_production_notes is not None:
            self.product_production_notes = product_production_notes
        if product_process_type_id is not None:
            self.product_process_type_id = product_process_type_id
        if step_list is not None:
            self.step_list = step_list
        if employee_id_product_worker_list is not None:
            self.employee_id_product_worker_list = employee_id_product_worker_list
        if steps_to_delete is not None:
            self.steps_to_delete = steps_to_delete

    @property
    def id(self):
        """Gets the id of this ProductionJobProductBindingModel.  # noqa: E501


        :return: The id of this ProductionJobProductBindingModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductionJobProductBindingModel.


        :param id: The id of this ProductionJobProductBindingModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def product_completed_date(self):
        """Gets the product_completed_date of this ProductionJobProductBindingModel.  # noqa: E501


        :return: The product_completed_date of this ProductionJobProductBindingModel.  # noqa: E501
        :rtype: datetime
        """
        return self._product_completed_date

    @product_completed_date.setter
    def product_completed_date(self, product_completed_date):
        """Sets the product_completed_date of this ProductionJobProductBindingModel.


        :param product_completed_date: The product_completed_date of this ProductionJobProductBindingModel.  # noqa: E501
        :type: datetime
        """

        self._product_completed_date = product_completed_date

    @property
    def work_crew_id(self):
        """Gets the work_crew_id of this ProductionJobProductBindingModel.  # noqa: E501


        :return: The work_crew_id of this ProductionJobProductBindingModel.  # noqa: E501
        :rtype: str
        """
        return self._work_crew_id

    @work_crew_id.setter
    def work_crew_id(self, work_crew_id):
        """Sets the work_crew_id of this ProductionJobProductBindingModel.


        :param work_crew_id: The work_crew_id of this ProductionJobProductBindingModel.  # noqa: E501
        :type: str
        """

        self._work_crew_id = work_crew_id

    @property
    def project_manager_id(self):
        """Gets the project_manager_id of this ProductionJobProductBindingModel.  # noqa: E501


        :return: The project_manager_id of this ProductionJobProductBindingModel.  # noqa: E501
        :rtype: str
        """
        return self._project_manager_id

    @project_manager_id.setter
    def project_manager_id(self, project_manager_id):
        """Sets the project_manager_id of this ProductionJobProductBindingModel.


        :param project_manager_id: The project_manager_id of this ProductionJobProductBindingModel.  # noqa: E501
        :type: str
        """

        self._project_manager_id = project_manager_id

    @property
    def product_production_notes(self):
        """Gets the product_production_notes of this ProductionJobProductBindingModel.  # noqa: E501


        :return: The product_production_notes of this ProductionJobProductBindingModel.  # noqa: E501
        :rtype: str
        """
        return self._product_production_notes

    @product_production_notes.setter
    def product_production_notes(self, product_production_notes):
        """Sets the product_production_notes of this ProductionJobProductBindingModel.


        :param product_production_notes: The product_production_notes of this ProductionJobProductBindingModel.  # noqa: E501
        :type: str
        """

        self._product_production_notes = product_production_notes

    @property
    def product_process_type_id(self):
        """Gets the product_process_type_id of this ProductionJobProductBindingModel.  # noqa: E501


        :return: The product_process_type_id of this ProductionJobProductBindingModel.  # noqa: E501
        :rtype: str
        """
        return self._product_process_type_id

    @product_process_type_id.setter
    def product_process_type_id(self, product_process_type_id):
        """Sets the product_process_type_id of this ProductionJobProductBindingModel.


        :param product_process_type_id: The product_process_type_id of this ProductionJobProductBindingModel.  # noqa: E501
        :type: str
        """

        self._product_process_type_id = product_process_type_id

    @property
    def step_list(self):
        """Gets the step_list of this ProductionJobProductBindingModel.  # noqa: E501


        :return: The step_list of this ProductionJobProductBindingModel.  # noqa: E501
        :rtype: list[ProductionStepBindingModel]
        """
        return self._step_list

    @step_list.setter
    def step_list(self, step_list):
        """Sets the step_list of this ProductionJobProductBindingModel.


        :param step_list: The step_list of this ProductionJobProductBindingModel.  # noqa: E501
        :type: list[ProductionStepBindingModel]
        """

        self._step_list = step_list

    @property
    def employee_id_product_worker_list(self):
        """Gets the employee_id_product_worker_list of this ProductionJobProductBindingModel.  # noqa: E501


        :return: The employee_id_product_worker_list of this ProductionJobProductBindingModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._employee_id_product_worker_list

    @employee_id_product_worker_list.setter
    def employee_id_product_worker_list(self, employee_id_product_worker_list):
        """Sets the employee_id_product_worker_list of this ProductionJobProductBindingModel.


        :param employee_id_product_worker_list: The employee_id_product_worker_list of this ProductionJobProductBindingModel.  # noqa: E501
        :type: list[str]
        """

        self._employee_id_product_worker_list = employee_id_product_worker_list

    @property
    def steps_to_delete(self):
        """Gets the steps_to_delete of this ProductionJobProductBindingModel.  # noqa: E501


        :return: The steps_to_delete of this ProductionJobProductBindingModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._steps_to_delete

    @steps_to_delete.setter
    def steps_to_delete(self, steps_to_delete):
        """Sets the steps_to_delete of this ProductionJobProductBindingModel.


        :param steps_to_delete: The steps_to_delete of this ProductionJobProductBindingModel.  # noqa: E501
        :type: list[str]
        """

        self._steps_to_delete = steps_to_delete

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductionJobProductBindingModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProductionJobProductBindingModel):
            return True

        return self.to_dict() != other.to_dict()
