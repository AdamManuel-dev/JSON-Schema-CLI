# coding: utf-8

"""
    MarketSharp CRM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class OpportunityNoteBindingModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'inquiry_id': 'str',
        'note': 'str',
        'opportunity_note_type': 'int'
    }

    attribute_map = {
        'id': 'id',
        'inquiry_id': 'inquiryId',
        'note': 'note',
        'opportunity_note_type': 'opportunityNoteType'
    }

    def __init__(self, id=None, inquiry_id=None, note=None, opportunity_note_type=None, local_vars_configuration=None):  # noqa: E501
        """OpportunityNoteBindingModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._inquiry_id = None
        self._note = None
        self._opportunity_note_type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if inquiry_id is not None:
            self.inquiry_id = inquiry_id
        if note is not None:
            self.note = note
        if opportunity_note_type is not None:
            self.opportunity_note_type = opportunity_note_type

    @property
    def id(self):
        """Gets the id of this OpportunityNoteBindingModel.  # noqa: E501

        Id of the note. Optional.  Populate if updating an existing record or leave empty if inserting a new record.  # noqa: E501

        :return: The id of this OpportunityNoteBindingModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OpportunityNoteBindingModel.

        Id of the note. Optional.  Populate if updating an existing record or leave empty if inserting a new record.  # noqa: E501

        :param id: The id of this OpportunityNoteBindingModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def inquiry_id(self):
        """Gets the inquiry_id of this OpportunityNoteBindingModel.  # noqa: E501

        Inquiry or lead id.  # noqa: E501

        :return: The inquiry_id of this OpportunityNoteBindingModel.  # noqa: E501
        :rtype: str
        """
        return self._inquiry_id

    @inquiry_id.setter
    def inquiry_id(self, inquiry_id):
        """Sets the inquiry_id of this OpportunityNoteBindingModel.

        Inquiry or lead id.  # noqa: E501

        :param inquiry_id: The inquiry_id of this OpportunityNoteBindingModel.  # noqa: E501
        :type: str
        """

        self._inquiry_id = inquiry_id

    @property
    def note(self):
        """Gets the note of this OpportunityNoteBindingModel.  # noqa: E501

        Field containing note text.  # noqa: E501

        :return: The note of this OpportunityNoteBindingModel.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this OpportunityNoteBindingModel.

        Field containing note text.  # noqa: E501

        :param note: The note of this OpportunityNoteBindingModel.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def opportunity_note_type(self):
        """Gets the opportunity_note_type of this OpportunityNoteBindingModel.  # noqa: E501

        Opportunity note type field.  # noqa: E501

        :return: The opportunity_note_type of this OpportunityNoteBindingModel.  # noqa: E501
        :rtype: int
        """
        return self._opportunity_note_type

    @opportunity_note_type.setter
    def opportunity_note_type(self, opportunity_note_type):
        """Sets the opportunity_note_type of this OpportunityNoteBindingModel.

        Opportunity note type field.  # noqa: E501

        :param opportunity_note_type: The opportunity_note_type of this OpportunityNoteBindingModel.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and opportunity_note_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `opportunity_note_type` ({0}), must be one of {1}"  # noqa: E501
                .format(opportunity_note_type, allowed_values)
            )

        self._opportunity_note_type = opportunity_note_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpportunityNoteBindingModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OpportunityNoteBindingModel):
            return True

        return self.to_dict() != other.to_dict()
