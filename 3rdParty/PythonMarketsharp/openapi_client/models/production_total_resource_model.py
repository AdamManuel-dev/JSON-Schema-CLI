# coding: utf-8

"""
    MarketSharp CRM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ProductionTotalResourceModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'completed_total': 'float',
        'completed_num': 'int',
        'overdue_total': 'float',
        'overdue_num': 'int',
        'future_total': 'float',
        'future_num': 'int',
        'due_now_total': 'float',
        'due_now_num': 'int',
        'not_scheduled_total': 'float',
        'not_scheduled_num': 'int'
    }

    attribute_map = {
        'completed_total': 'completedTotal',
        'completed_num': 'completedNum',
        'overdue_total': 'overdueTotal',
        'overdue_num': 'overdueNum',
        'future_total': 'futureTotal',
        'future_num': 'futureNum',
        'due_now_total': 'dueNowTotal',
        'due_now_num': 'dueNowNum',
        'not_scheduled_total': 'notScheduledTotal',
        'not_scheduled_num': 'notScheduledNum'
    }

    def __init__(self, completed_total=None, completed_num=None, overdue_total=None, overdue_num=None, future_total=None, future_num=None, due_now_total=None, due_now_num=None, not_scheduled_total=None, not_scheduled_num=None, local_vars_configuration=None):  # noqa: E501
        """ProductionTotalResourceModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._completed_total = None
        self._completed_num = None
        self._overdue_total = None
        self._overdue_num = None
        self._future_total = None
        self._future_num = None
        self._due_now_total = None
        self._due_now_num = None
        self._not_scheduled_total = None
        self._not_scheduled_num = None
        self.discriminator = None

        if completed_total is not None:
            self.completed_total = completed_total
        if completed_num is not None:
            self.completed_num = completed_num
        if overdue_total is not None:
            self.overdue_total = overdue_total
        if overdue_num is not None:
            self.overdue_num = overdue_num
        if future_total is not None:
            self.future_total = future_total
        if future_num is not None:
            self.future_num = future_num
        if due_now_total is not None:
            self.due_now_total = due_now_total
        if due_now_num is not None:
            self.due_now_num = due_now_num
        if not_scheduled_total is not None:
            self.not_scheduled_total = not_scheduled_total
        if not_scheduled_num is not None:
            self.not_scheduled_num = not_scheduled_num

    @property
    def completed_total(self):
        """Gets the completed_total of this ProductionTotalResourceModel.  # noqa: E501


        :return: The completed_total of this ProductionTotalResourceModel.  # noqa: E501
        :rtype: float
        """
        return self._completed_total

    @completed_total.setter
    def completed_total(self, completed_total):
        """Sets the completed_total of this ProductionTotalResourceModel.


        :param completed_total: The completed_total of this ProductionTotalResourceModel.  # noqa: E501
        :type: float
        """

        self._completed_total = completed_total

    @property
    def completed_num(self):
        """Gets the completed_num of this ProductionTotalResourceModel.  # noqa: E501


        :return: The completed_num of this ProductionTotalResourceModel.  # noqa: E501
        :rtype: int
        """
        return self._completed_num

    @completed_num.setter
    def completed_num(self, completed_num):
        """Sets the completed_num of this ProductionTotalResourceModel.


        :param completed_num: The completed_num of this ProductionTotalResourceModel.  # noqa: E501
        :type: int
        """

        self._completed_num = completed_num

    @property
    def overdue_total(self):
        """Gets the overdue_total of this ProductionTotalResourceModel.  # noqa: E501


        :return: The overdue_total of this ProductionTotalResourceModel.  # noqa: E501
        :rtype: float
        """
        return self._overdue_total

    @overdue_total.setter
    def overdue_total(self, overdue_total):
        """Sets the overdue_total of this ProductionTotalResourceModel.


        :param overdue_total: The overdue_total of this ProductionTotalResourceModel.  # noqa: E501
        :type: float
        """

        self._overdue_total = overdue_total

    @property
    def overdue_num(self):
        """Gets the overdue_num of this ProductionTotalResourceModel.  # noqa: E501


        :return: The overdue_num of this ProductionTotalResourceModel.  # noqa: E501
        :rtype: int
        """
        return self._overdue_num

    @overdue_num.setter
    def overdue_num(self, overdue_num):
        """Sets the overdue_num of this ProductionTotalResourceModel.


        :param overdue_num: The overdue_num of this ProductionTotalResourceModel.  # noqa: E501
        :type: int
        """

        self._overdue_num = overdue_num

    @property
    def future_total(self):
        """Gets the future_total of this ProductionTotalResourceModel.  # noqa: E501


        :return: The future_total of this ProductionTotalResourceModel.  # noqa: E501
        :rtype: float
        """
        return self._future_total

    @future_total.setter
    def future_total(self, future_total):
        """Sets the future_total of this ProductionTotalResourceModel.


        :param future_total: The future_total of this ProductionTotalResourceModel.  # noqa: E501
        :type: float
        """

        self._future_total = future_total

    @property
    def future_num(self):
        """Gets the future_num of this ProductionTotalResourceModel.  # noqa: E501


        :return: The future_num of this ProductionTotalResourceModel.  # noqa: E501
        :rtype: int
        """
        return self._future_num

    @future_num.setter
    def future_num(self, future_num):
        """Sets the future_num of this ProductionTotalResourceModel.


        :param future_num: The future_num of this ProductionTotalResourceModel.  # noqa: E501
        :type: int
        """

        self._future_num = future_num

    @property
    def due_now_total(self):
        """Gets the due_now_total of this ProductionTotalResourceModel.  # noqa: E501


        :return: The due_now_total of this ProductionTotalResourceModel.  # noqa: E501
        :rtype: float
        """
        return self._due_now_total

    @due_now_total.setter
    def due_now_total(self, due_now_total):
        """Sets the due_now_total of this ProductionTotalResourceModel.


        :param due_now_total: The due_now_total of this ProductionTotalResourceModel.  # noqa: E501
        :type: float
        """

        self._due_now_total = due_now_total

    @property
    def due_now_num(self):
        """Gets the due_now_num of this ProductionTotalResourceModel.  # noqa: E501


        :return: The due_now_num of this ProductionTotalResourceModel.  # noqa: E501
        :rtype: int
        """
        return self._due_now_num

    @due_now_num.setter
    def due_now_num(self, due_now_num):
        """Sets the due_now_num of this ProductionTotalResourceModel.


        :param due_now_num: The due_now_num of this ProductionTotalResourceModel.  # noqa: E501
        :type: int
        """

        self._due_now_num = due_now_num

    @property
    def not_scheduled_total(self):
        """Gets the not_scheduled_total of this ProductionTotalResourceModel.  # noqa: E501


        :return: The not_scheduled_total of this ProductionTotalResourceModel.  # noqa: E501
        :rtype: float
        """
        return self._not_scheduled_total

    @not_scheduled_total.setter
    def not_scheduled_total(self, not_scheduled_total):
        """Sets the not_scheduled_total of this ProductionTotalResourceModel.


        :param not_scheduled_total: The not_scheduled_total of this ProductionTotalResourceModel.  # noqa: E501
        :type: float
        """

        self._not_scheduled_total = not_scheduled_total

    @property
    def not_scheduled_num(self):
        """Gets the not_scheduled_num of this ProductionTotalResourceModel.  # noqa: E501


        :return: The not_scheduled_num of this ProductionTotalResourceModel.  # noqa: E501
        :rtype: int
        """
        return self._not_scheduled_num

    @not_scheduled_num.setter
    def not_scheduled_num(self, not_scheduled_num):
        """Sets the not_scheduled_num of this ProductionTotalResourceModel.


        :param not_scheduled_num: The not_scheduled_num of this ProductionTotalResourceModel.  # noqa: E501
        :type: int
        """

        self._not_scheduled_num = not_scheduled_num

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductionTotalResourceModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProductionTotalResourceModel):
            return True

        return self.to_dict() != other.to_dict()
