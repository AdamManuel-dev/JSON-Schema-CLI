# coding: utf-8

"""
    MarketSharp CRM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ProductionDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'coy_oid': 'str',
        'contract_date': 'datetime',
        'contract_status': 'str',
        'contract_amount': 'float',
        'contract_balance_due': 'float',
        'contact_type': 'str',
        'product_id': 'str',
        'product_name': 'str',
        'contact': 'ContactViewResourceModel',
        'address': 'AddressViewResourceModel',
        'job': 'JobViewResourceModel',
        'job_product': 'JobProductViewResourceModel',
        'custom_field_values': 'list[KeyValueResourceModel]'
    }

    attribute_map = {
        'coy_oid': 'coyOid',
        'contract_date': 'contractDate',
        'contract_status': 'contractStatus',
        'contract_amount': 'contractAmount',
        'contract_balance_due': 'contractBalanceDue',
        'contact_type': 'contactType',
        'product_id': 'productId',
        'product_name': 'productName',
        'contact': 'contact',
        'address': 'address',
        'job': 'job',
        'job_product': 'jobProduct',
        'custom_field_values': 'customFieldValues'
    }

    def __init__(self, coy_oid=None, contract_date=None, contract_status=None, contract_amount=None, contract_balance_due=None, contact_type=None, product_id=None, product_name=None, contact=None, address=None, job=None, job_product=None, custom_field_values=None, local_vars_configuration=None):  # noqa: E501
        """ProductionDetail - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._coy_oid = None
        self._contract_date = None
        self._contract_status = None
        self._contract_amount = None
        self._contract_balance_due = None
        self._contact_type = None
        self._product_id = None
        self._product_name = None
        self._contact = None
        self._address = None
        self._job = None
        self._job_product = None
        self._custom_field_values = None
        self.discriminator = None

        if coy_oid is not None:
            self.coy_oid = coy_oid
        if contract_date is not None:
            self.contract_date = contract_date
        if contract_status is not None:
            self.contract_status = contract_status
        if contract_amount is not None:
            self.contract_amount = contract_amount
        if contract_balance_due is not None:
            self.contract_balance_due = contract_balance_due
        if contact_type is not None:
            self.contact_type = contact_type
        if product_id is not None:
            self.product_id = product_id
        if product_name is not None:
            self.product_name = product_name
        if contact is not None:
            self.contact = contact
        if address is not None:
            self.address = address
        if job is not None:
            self.job = job
        if job_product is not None:
            self.job_product = job_product
        if custom_field_values is not None:
            self.custom_field_values = custom_field_values

    @property
    def coy_oid(self):
        """Gets the coy_oid of this ProductionDetail.  # noqa: E501


        :return: The coy_oid of this ProductionDetail.  # noqa: E501
        :rtype: str
        """
        return self._coy_oid

    @coy_oid.setter
    def coy_oid(self, coy_oid):
        """Sets the coy_oid of this ProductionDetail.


        :param coy_oid: The coy_oid of this ProductionDetail.  # noqa: E501
        :type: str
        """

        self._coy_oid = coy_oid

    @property
    def contract_date(self):
        """Gets the contract_date of this ProductionDetail.  # noqa: E501


        :return: The contract_date of this ProductionDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._contract_date

    @contract_date.setter
    def contract_date(self, contract_date):
        """Sets the contract_date of this ProductionDetail.


        :param contract_date: The contract_date of this ProductionDetail.  # noqa: E501
        :type: datetime
        """

        self._contract_date = contract_date

    @property
    def contract_status(self):
        """Gets the contract_status of this ProductionDetail.  # noqa: E501


        :return: The contract_status of this ProductionDetail.  # noqa: E501
        :rtype: str
        """
        return self._contract_status

    @contract_status.setter
    def contract_status(self, contract_status):
        """Sets the contract_status of this ProductionDetail.


        :param contract_status: The contract_status of this ProductionDetail.  # noqa: E501
        :type: str
        """

        self._contract_status = contract_status

    @property
    def contract_amount(self):
        """Gets the contract_amount of this ProductionDetail.  # noqa: E501


        :return: The contract_amount of this ProductionDetail.  # noqa: E501
        :rtype: float
        """
        return self._contract_amount

    @contract_amount.setter
    def contract_amount(self, contract_amount):
        """Sets the contract_amount of this ProductionDetail.


        :param contract_amount: The contract_amount of this ProductionDetail.  # noqa: E501
        :type: float
        """

        self._contract_amount = contract_amount

    @property
    def contract_balance_due(self):
        """Gets the contract_balance_due of this ProductionDetail.  # noqa: E501


        :return: The contract_balance_due of this ProductionDetail.  # noqa: E501
        :rtype: float
        """
        return self._contract_balance_due

    @contract_balance_due.setter
    def contract_balance_due(self, contract_balance_due):
        """Sets the contract_balance_due of this ProductionDetail.


        :param contract_balance_due: The contract_balance_due of this ProductionDetail.  # noqa: E501
        :type: float
        """

        self._contract_balance_due = contract_balance_due

    @property
    def contact_type(self):
        """Gets the contact_type of this ProductionDetail.  # noqa: E501


        :return: The contact_type of this ProductionDetail.  # noqa: E501
        :rtype: str
        """
        return self._contact_type

    @contact_type.setter
    def contact_type(self, contact_type):
        """Sets the contact_type of this ProductionDetail.


        :param contact_type: The contact_type of this ProductionDetail.  # noqa: E501
        :type: str
        """

        self._contact_type = contact_type

    @property
    def product_id(self):
        """Gets the product_id of this ProductionDetail.  # noqa: E501


        :return: The product_id of this ProductionDetail.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ProductionDetail.


        :param product_id: The product_id of this ProductionDetail.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def product_name(self):
        """Gets the product_name of this ProductionDetail.  # noqa: E501


        :return: The product_name of this ProductionDetail.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this ProductionDetail.


        :param product_name: The product_name of this ProductionDetail.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def contact(self):
        """Gets the contact of this ProductionDetail.  # noqa: E501


        :return: The contact of this ProductionDetail.  # noqa: E501
        :rtype: ContactViewResourceModel
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this ProductionDetail.


        :param contact: The contact of this ProductionDetail.  # noqa: E501
        :type: ContactViewResourceModel
        """

        self._contact = contact

    @property
    def address(self):
        """Gets the address of this ProductionDetail.  # noqa: E501


        :return: The address of this ProductionDetail.  # noqa: E501
        :rtype: AddressViewResourceModel
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ProductionDetail.


        :param address: The address of this ProductionDetail.  # noqa: E501
        :type: AddressViewResourceModel
        """

        self._address = address

    @property
    def job(self):
        """Gets the job of this ProductionDetail.  # noqa: E501


        :return: The job of this ProductionDetail.  # noqa: E501
        :rtype: JobViewResourceModel
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this ProductionDetail.


        :param job: The job of this ProductionDetail.  # noqa: E501
        :type: JobViewResourceModel
        """

        self._job = job

    @property
    def job_product(self):
        """Gets the job_product of this ProductionDetail.  # noqa: E501


        :return: The job_product of this ProductionDetail.  # noqa: E501
        :rtype: JobProductViewResourceModel
        """
        return self._job_product

    @job_product.setter
    def job_product(self, job_product):
        """Sets the job_product of this ProductionDetail.


        :param job_product: The job_product of this ProductionDetail.  # noqa: E501
        :type: JobProductViewResourceModel
        """

        self._job_product = job_product

    @property
    def custom_field_values(self):
        """Gets the custom_field_values of this ProductionDetail.  # noqa: E501


        :return: The custom_field_values of this ProductionDetail.  # noqa: E501
        :rtype: list[KeyValueResourceModel]
        """
        return self._custom_field_values

    @custom_field_values.setter
    def custom_field_values(self, custom_field_values):
        """Sets the custom_field_values of this ProductionDetail.


        :param custom_field_values: The custom_field_values of this ProductionDetail.  # noqa: E501
        :type: list[KeyValueResourceModel]
        """

        self._custom_field_values = custom_field_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductionDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProductionDetail):
            return True

        return self.to_dict() != other.to_dict()
