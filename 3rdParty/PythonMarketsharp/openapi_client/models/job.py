# coding: utf-8

"""
    MarketSharp CRM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Job(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'job_name': 'str',
        'job_type': 'str',
        'job_status': 'str',
        'lead_id': 'str',
        'contact_id': 'str',
        'sale_date': 'datetime',
        'completion_date': 'datetime',
        'lead_appointment_sold_id': 'str',
        'lead_appointment_sold_date': 'datetime',
        'contract_total': 'float',
        'contract_date': 'datetime',
        'created_at': 'datetime',
        'created_by': 'str',
        'updated_at': 'datetime',
        'updated_by': 'str'
    }

    attribute_map = {
        'id': 'id',
        'job_name': 'jobName',
        'job_type': 'jobType',
        'job_status': 'jobStatus',
        'lead_id': 'leadId',
        'contact_id': 'contactId',
        'sale_date': 'saleDate',
        'completion_date': 'completionDate',
        'lead_appointment_sold_id': 'leadAppointmentSoldId',
        'lead_appointment_sold_date': 'leadAppointmentSoldDate',
        'contract_total': 'contractTotal',
        'contract_date': 'contractDate',
        'created_at': 'createdAt',
        'created_by': 'createdBy',
        'updated_at': 'updatedAt',
        'updated_by': 'updatedBy'
    }

    def __init__(self, id=None, job_name=None, job_type=None, job_status=None, lead_id=None, contact_id=None, sale_date=None, completion_date=None, lead_appointment_sold_id=None, lead_appointment_sold_date=None, contract_total=None, contract_date=None, created_at=None, created_by=None, updated_at=None, updated_by=None, local_vars_configuration=None):  # noqa: E501
        """Job - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._job_name = None
        self._job_type = None
        self._job_status = None
        self._lead_id = None
        self._contact_id = None
        self._sale_date = None
        self._completion_date = None
        self._lead_appointment_sold_id = None
        self._lead_appointment_sold_date = None
        self._contract_total = None
        self._contract_date = None
        self._created_at = None
        self._created_by = None
        self._updated_at = None
        self._updated_by = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if job_name is not None:
            self.job_name = job_name
        if job_type is not None:
            self.job_type = job_type
        if job_status is not None:
            self.job_status = job_status
        if lead_id is not None:
            self.lead_id = lead_id
        if contact_id is not None:
            self.contact_id = contact_id
        if sale_date is not None:
            self.sale_date = sale_date
        if completion_date is not None:
            self.completion_date = completion_date
        if lead_appointment_sold_id is not None:
            self.lead_appointment_sold_id = lead_appointment_sold_id
        if lead_appointment_sold_date is not None:
            self.lead_appointment_sold_date = lead_appointment_sold_date
        if contract_total is not None:
            self.contract_total = contract_total
        if contract_date is not None:
            self.contract_date = contract_date
        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        if updated_at is not None:
            self.updated_at = updated_at
        if updated_by is not None:
            self.updated_by = updated_by

    @property
    def id(self):
        """Gets the id of this Job.  # noqa: E501


        :return: The id of this Job.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Job.


        :param id: The id of this Job.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def job_name(self):
        """Gets the job_name of this Job.  # noqa: E501


        :return: The job_name of this Job.  # noqa: E501
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this Job.


        :param job_name: The job_name of this Job.  # noqa: E501
        :type: str
        """

        self._job_name = job_name

    @property
    def job_type(self):
        """Gets the job_type of this Job.  # noqa: E501


        :return: The job_type of this Job.  # noqa: E501
        :rtype: str
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this Job.


        :param job_type: The job_type of this Job.  # noqa: E501
        :type: str
        """

        self._job_type = job_type

    @property
    def job_status(self):
        """Gets the job_status of this Job.  # noqa: E501


        :return: The job_status of this Job.  # noqa: E501
        :rtype: str
        """
        return self._job_status

    @job_status.setter
    def job_status(self, job_status):
        """Sets the job_status of this Job.


        :param job_status: The job_status of this Job.  # noqa: E501
        :type: str
        """

        self._job_status = job_status

    @property
    def lead_id(self):
        """Gets the lead_id of this Job.  # noqa: E501


        :return: The lead_id of this Job.  # noqa: E501
        :rtype: str
        """
        return self._lead_id

    @lead_id.setter
    def lead_id(self, lead_id):
        """Sets the lead_id of this Job.


        :param lead_id: The lead_id of this Job.  # noqa: E501
        :type: str
        """

        self._lead_id = lead_id

    @property
    def contact_id(self):
        """Gets the contact_id of this Job.  # noqa: E501


        :return: The contact_id of this Job.  # noqa: E501
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this Job.


        :param contact_id: The contact_id of this Job.  # noqa: E501
        :type: str
        """

        self._contact_id = contact_id

    @property
    def sale_date(self):
        """Gets the sale_date of this Job.  # noqa: E501


        :return: The sale_date of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._sale_date

    @sale_date.setter
    def sale_date(self, sale_date):
        """Sets the sale_date of this Job.


        :param sale_date: The sale_date of this Job.  # noqa: E501
        :type: datetime
        """

        self._sale_date = sale_date

    @property
    def completion_date(self):
        """Gets the completion_date of this Job.  # noqa: E501


        :return: The completion_date of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._completion_date

    @completion_date.setter
    def completion_date(self, completion_date):
        """Sets the completion_date of this Job.


        :param completion_date: The completion_date of this Job.  # noqa: E501
        :type: datetime
        """

        self._completion_date = completion_date

    @property
    def lead_appointment_sold_id(self):
        """Gets the lead_appointment_sold_id of this Job.  # noqa: E501


        :return: The lead_appointment_sold_id of this Job.  # noqa: E501
        :rtype: str
        """
        return self._lead_appointment_sold_id

    @lead_appointment_sold_id.setter
    def lead_appointment_sold_id(self, lead_appointment_sold_id):
        """Sets the lead_appointment_sold_id of this Job.


        :param lead_appointment_sold_id: The lead_appointment_sold_id of this Job.  # noqa: E501
        :type: str
        """

        self._lead_appointment_sold_id = lead_appointment_sold_id

    @property
    def lead_appointment_sold_date(self):
        """Gets the lead_appointment_sold_date of this Job.  # noqa: E501


        :return: The lead_appointment_sold_date of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._lead_appointment_sold_date

    @lead_appointment_sold_date.setter
    def lead_appointment_sold_date(self, lead_appointment_sold_date):
        """Sets the lead_appointment_sold_date of this Job.


        :param lead_appointment_sold_date: The lead_appointment_sold_date of this Job.  # noqa: E501
        :type: datetime
        """

        self._lead_appointment_sold_date = lead_appointment_sold_date

    @property
    def contract_total(self):
        """Gets the contract_total of this Job.  # noqa: E501


        :return: The contract_total of this Job.  # noqa: E501
        :rtype: float
        """
        return self._contract_total

    @contract_total.setter
    def contract_total(self, contract_total):
        """Sets the contract_total of this Job.


        :param contract_total: The contract_total of this Job.  # noqa: E501
        :type: float
        """

        self._contract_total = contract_total

    @property
    def contract_date(self):
        """Gets the contract_date of this Job.  # noqa: E501


        :return: The contract_date of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._contract_date

    @contract_date.setter
    def contract_date(self, contract_date):
        """Sets the contract_date of this Job.


        :param contract_date: The contract_date of this Job.  # noqa: E501
        :type: datetime
        """

        self._contract_date = contract_date

    @property
    def created_at(self):
        """Gets the created_at of this Job.  # noqa: E501


        :return: The created_at of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Job.


        :param created_at: The created_at of this Job.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Job.  # noqa: E501


        :return: The created_by of this Job.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Job.


        :param created_by: The created_by of this Job.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def updated_at(self):
        """Gets the updated_at of this Job.  # noqa: E501


        :return: The updated_at of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Job.


        :param updated_at: The updated_at of this Job.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this Job.  # noqa: E501


        :return: The updated_by of this Job.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Job.


        :param updated_by: The updated_by of this Job.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Job):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Job):
            return True

        return self.to_dict() != other.to_dict()
