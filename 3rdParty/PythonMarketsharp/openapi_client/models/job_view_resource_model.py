# coding: utf-8

"""
    MarketSharp CRM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class JobViewResourceModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'job_address1': 'str',
        'job_address2': 'str',
        'job_city': 'str',
        'job_completed_date': 'datetime',
        'job_name': 'str',
        'job_notes': 'str',
        'job_number': 'str',
        'job_sale_date': 'datetime',
        'job_status': 'str',
        'job_type': 'str',
        'job_zip': 'str'
    }

    attribute_map = {
        'job_address1': 'jobAddress1',
        'job_address2': 'jobAddress2',
        'job_city': 'jobCity',
        'job_completed_date': 'jobCompletedDate',
        'job_name': 'jobName',
        'job_notes': 'jobNotes',
        'job_number': 'jobNumber',
        'job_sale_date': 'jobSaleDate',
        'job_status': 'jobStatus',
        'job_type': 'jobType',
        'job_zip': 'jobZip'
    }

    def __init__(self, job_address1=None, job_address2=None, job_city=None, job_completed_date=None, job_name=None, job_notes=None, job_number=None, job_sale_date=None, job_status=None, job_type=None, job_zip=None, local_vars_configuration=None):  # noqa: E501
        """JobViewResourceModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._job_address1 = None
        self._job_address2 = None
        self._job_city = None
        self._job_completed_date = None
        self._job_name = None
        self._job_notes = None
        self._job_number = None
        self._job_sale_date = None
        self._job_status = None
        self._job_type = None
        self._job_zip = None
        self.discriminator = None

        if job_address1 is not None:
            self.job_address1 = job_address1
        if job_address2 is not None:
            self.job_address2 = job_address2
        if job_city is not None:
            self.job_city = job_city
        if job_completed_date is not None:
            self.job_completed_date = job_completed_date
        if job_name is not None:
            self.job_name = job_name
        if job_notes is not None:
            self.job_notes = job_notes
        if job_number is not None:
            self.job_number = job_number
        if job_sale_date is not None:
            self.job_sale_date = job_sale_date
        if job_status is not None:
            self.job_status = job_status
        if job_type is not None:
            self.job_type = job_type
        if job_zip is not None:
            self.job_zip = job_zip

    @property
    def job_address1(self):
        """Gets the job_address1 of this JobViewResourceModel.  # noqa: E501


        :return: The job_address1 of this JobViewResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._job_address1

    @job_address1.setter
    def job_address1(self, job_address1):
        """Sets the job_address1 of this JobViewResourceModel.


        :param job_address1: The job_address1 of this JobViewResourceModel.  # noqa: E501
        :type: str
        """

        self._job_address1 = job_address1

    @property
    def job_address2(self):
        """Gets the job_address2 of this JobViewResourceModel.  # noqa: E501


        :return: The job_address2 of this JobViewResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._job_address2

    @job_address2.setter
    def job_address2(self, job_address2):
        """Sets the job_address2 of this JobViewResourceModel.


        :param job_address2: The job_address2 of this JobViewResourceModel.  # noqa: E501
        :type: str
        """

        self._job_address2 = job_address2

    @property
    def job_city(self):
        """Gets the job_city of this JobViewResourceModel.  # noqa: E501


        :return: The job_city of this JobViewResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._job_city

    @job_city.setter
    def job_city(self, job_city):
        """Sets the job_city of this JobViewResourceModel.


        :param job_city: The job_city of this JobViewResourceModel.  # noqa: E501
        :type: str
        """

        self._job_city = job_city

    @property
    def job_completed_date(self):
        """Gets the job_completed_date of this JobViewResourceModel.  # noqa: E501


        :return: The job_completed_date of this JobViewResourceModel.  # noqa: E501
        :rtype: datetime
        """
        return self._job_completed_date

    @job_completed_date.setter
    def job_completed_date(self, job_completed_date):
        """Sets the job_completed_date of this JobViewResourceModel.


        :param job_completed_date: The job_completed_date of this JobViewResourceModel.  # noqa: E501
        :type: datetime
        """

        self._job_completed_date = job_completed_date

    @property
    def job_name(self):
        """Gets the job_name of this JobViewResourceModel.  # noqa: E501


        :return: The job_name of this JobViewResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this JobViewResourceModel.


        :param job_name: The job_name of this JobViewResourceModel.  # noqa: E501
        :type: str
        """

        self._job_name = job_name

    @property
    def job_notes(self):
        """Gets the job_notes of this JobViewResourceModel.  # noqa: E501


        :return: The job_notes of this JobViewResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._job_notes

    @job_notes.setter
    def job_notes(self, job_notes):
        """Sets the job_notes of this JobViewResourceModel.


        :param job_notes: The job_notes of this JobViewResourceModel.  # noqa: E501
        :type: str
        """

        self._job_notes = job_notes

    @property
    def job_number(self):
        """Gets the job_number of this JobViewResourceModel.  # noqa: E501


        :return: The job_number of this JobViewResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._job_number

    @job_number.setter
    def job_number(self, job_number):
        """Sets the job_number of this JobViewResourceModel.


        :param job_number: The job_number of this JobViewResourceModel.  # noqa: E501
        :type: str
        """

        self._job_number = job_number

    @property
    def job_sale_date(self):
        """Gets the job_sale_date of this JobViewResourceModel.  # noqa: E501


        :return: The job_sale_date of this JobViewResourceModel.  # noqa: E501
        :rtype: datetime
        """
        return self._job_sale_date

    @job_sale_date.setter
    def job_sale_date(self, job_sale_date):
        """Sets the job_sale_date of this JobViewResourceModel.


        :param job_sale_date: The job_sale_date of this JobViewResourceModel.  # noqa: E501
        :type: datetime
        """

        self._job_sale_date = job_sale_date

    @property
    def job_status(self):
        """Gets the job_status of this JobViewResourceModel.  # noqa: E501


        :return: The job_status of this JobViewResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._job_status

    @job_status.setter
    def job_status(self, job_status):
        """Sets the job_status of this JobViewResourceModel.


        :param job_status: The job_status of this JobViewResourceModel.  # noqa: E501
        :type: str
        """

        self._job_status = job_status

    @property
    def job_type(self):
        """Gets the job_type of this JobViewResourceModel.  # noqa: E501


        :return: The job_type of this JobViewResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this JobViewResourceModel.


        :param job_type: The job_type of this JobViewResourceModel.  # noqa: E501
        :type: str
        """

        self._job_type = job_type

    @property
    def job_zip(self):
        """Gets the job_zip of this JobViewResourceModel.  # noqa: E501


        :return: The job_zip of this JobViewResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._job_zip

    @job_zip.setter
    def job_zip(self, job_zip):
        """Sets the job_zip of this JobViewResourceModel.


        :param job_zip: The job_zip of this JobViewResourceModel.  # noqa: E501
        :type: str
        """

        self._job_zip = job_zip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobViewResourceModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobViewResourceModel):
            return True

        return self.to_dict() != other.to_dict()
