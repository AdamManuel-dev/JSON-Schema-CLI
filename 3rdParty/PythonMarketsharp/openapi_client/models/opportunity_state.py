# coding: utf-8

"""
    MarketSharp CRM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class OpportunityState(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'is_qualified': 'bool',
        'is_set': 'bool',
        'is_sold': 'bool'
    }

    attribute_map = {
        'is_qualified': 'isQualified',
        'is_set': 'isSet',
        'is_sold': 'isSold'
    }

    def __init__(self, is_qualified=None, is_set=None, is_sold=None, local_vars_configuration=None):  # noqa: E501
        """OpportunityState - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._is_qualified = None
        self._is_set = None
        self._is_sold = None
        self.discriminator = None

        if is_qualified is not None:
            self.is_qualified = is_qualified
        if is_set is not None:
            self.is_set = is_set
        if is_sold is not None:
            self.is_sold = is_sold

    @property
    def is_qualified(self):
        """Gets the is_qualified of this OpportunityState.  # noqa: E501

        An Employee has verified the opportunity that it is appropiate for the company to pursue  # noqa: E501

        :return: The is_qualified of this OpportunityState.  # noqa: E501
        :rtype: bool
        """
        return self._is_qualified

    @is_qualified.setter
    def is_qualified(self, is_qualified):
        """Sets the is_qualified of this OpportunityState.

        An Employee has verified the opportunity that it is appropiate for the company to pursue  # noqa: E501

        :param is_qualified: The is_qualified of this OpportunityState.  # noqa: E501
        :type: bool
        """

        self._is_qualified = is_qualified

    @property
    def is_set(self):
        """Gets the is_set of this OpportunityState.  # noqa: E501

        Has an appointment been set for the opportunity  # noqa: E501

        :return: The is_set of this OpportunityState.  # noqa: E501
        :rtype: bool
        """
        return self._is_set

    @is_set.setter
    def is_set(self, is_set):
        """Sets the is_set of this OpportunityState.

        Has an appointment been set for the opportunity  # noqa: E501

        :param is_set: The is_set of this OpportunityState.  # noqa: E501
        :type: bool
        """

        self._is_set = is_set

    @property
    def is_sold(self):
        """Gets the is_sold of this OpportunityState.  # noqa: E501

        Has the opportunity been sold  # noqa: E501

        :return: The is_sold of this OpportunityState.  # noqa: E501
        :rtype: bool
        """
        return self._is_sold

    @is_sold.setter
    def is_sold(self, is_sold):
        """Sets the is_sold of this OpportunityState.

        Has the opportunity been sold  # noqa: E501

        :param is_sold: The is_sold of this OpportunityState.  # noqa: E501
        :type: bool
        """

        self._is_sold = is_sold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpportunityState):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OpportunityState):
            return True

        return self.to_dict() != other.to_dict()
