# coding: utf-8

"""
    MarketSharp CRM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ViewBindingModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'field_list': 'list[Field]',
        'company_id': 'str',
        'view_id': 'str',
        'view_name': 'str',
        'list_view_type': 'str',
        'is_public': 'bool'
    }

    attribute_map = {
        'field_list': 'fieldList',
        'company_id': 'companyId',
        'view_id': 'viewId',
        'view_name': 'viewName',
        'list_view_type': 'listViewType',
        'is_public': 'isPublic'
    }

    def __init__(self, field_list=None, company_id=None, view_id=None, view_name=None, list_view_type=None, is_public=None, local_vars_configuration=None):  # noqa: E501
        """ViewBindingModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._field_list = None
        self._company_id = None
        self._view_id = None
        self._view_name = None
        self._list_view_type = None
        self._is_public = None
        self.discriminator = None

        if field_list is not None:
            self.field_list = field_list
        if company_id is not None:
            self.company_id = company_id
        if view_id is not None:
            self.view_id = view_id
        if view_name is not None:
            self.view_name = view_name
        if list_view_type is not None:
            self.list_view_type = list_view_type
        if is_public is not None:
            self.is_public = is_public

    @property
    def field_list(self):
        """Gets the field_list of this ViewBindingModel.  # noqa: E501


        :return: The field_list of this ViewBindingModel.  # noqa: E501
        :rtype: list[Field]
        """
        return self._field_list

    @field_list.setter
    def field_list(self, field_list):
        """Sets the field_list of this ViewBindingModel.


        :param field_list: The field_list of this ViewBindingModel.  # noqa: E501
        :type: list[Field]
        """

        self._field_list = field_list

    @property
    def company_id(self):
        """Gets the company_id of this ViewBindingModel.  # noqa: E501


        :return: The company_id of this ViewBindingModel.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this ViewBindingModel.


        :param company_id: The company_id of this ViewBindingModel.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def view_id(self):
        """Gets the view_id of this ViewBindingModel.  # noqa: E501


        :return: The view_id of this ViewBindingModel.  # noqa: E501
        :rtype: str
        """
        return self._view_id

    @view_id.setter
    def view_id(self, view_id):
        """Sets the view_id of this ViewBindingModel.


        :param view_id: The view_id of this ViewBindingModel.  # noqa: E501
        :type: str
        """

        self._view_id = view_id

    @property
    def view_name(self):
        """Gets the view_name of this ViewBindingModel.  # noqa: E501


        :return: The view_name of this ViewBindingModel.  # noqa: E501
        :rtype: str
        """
        return self._view_name

    @view_name.setter
    def view_name(self, view_name):
        """Sets the view_name of this ViewBindingModel.


        :param view_name: The view_name of this ViewBindingModel.  # noqa: E501
        :type: str
        """

        self._view_name = view_name

    @property
    def list_view_type(self):
        """Gets the list_view_type of this ViewBindingModel.  # noqa: E501

        The Type of the list. Is this an activity list, production list....?  See MarketSharp.CRM.Data.Enum.ListViewType for acceptable types  # noqa: E501

        :return: The list_view_type of this ViewBindingModel.  # noqa: E501
        :rtype: str
        """
        return self._list_view_type

    @list_view_type.setter
    def list_view_type(self, list_view_type):
        """Sets the list_view_type of this ViewBindingModel.

        The Type of the list. Is this an activity list, production list....?  See MarketSharp.CRM.Data.Enum.ListViewType for acceptable types  # noqa: E501

        :param list_view_type: The list_view_type of this ViewBindingModel.  # noqa: E501
        :type: str
        """

        self._list_view_type = list_view_type

    @property
    def is_public(self):
        """Gets the is_public of this ViewBindingModel.  # noqa: E501

        Whether this View is viewable by everyone or just the person who created it. By default views are created as private if this field is not specified  # noqa: E501

        :return: The is_public of this ViewBindingModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this ViewBindingModel.

        Whether this View is viewable by everyone or just the person who created it. By default views are created as private if this field is not specified  # noqa: E501

        :param is_public: The is_public of this ViewBindingModel.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ViewBindingModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ViewBindingModel):
            return True

        return self.to_dict() != other.to_dict()
