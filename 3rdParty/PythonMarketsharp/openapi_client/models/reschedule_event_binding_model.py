# coding: utf-8

"""
    MarketSharp CRM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class RescheduleEventBindingModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'view': 'str',
        'resource_id': 'int',
        'start': 'datetime',
        'end': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'view': 'view',
        'resource_id': 'resourceId',
        'start': 'start',
        'end': 'end'
    }

    def __init__(self, id=None, view=None, resource_id=None, start=None, end=None, local_vars_configuration=None):  # noqa: E501
        """RescheduleEventBindingModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._view = None
        self._resource_id = None
        self._start = None
        self._end = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if view is not None:
            self.view = view
        if resource_id is not None:
            self.resource_id = resource_id
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end

    @property
    def id(self):
        """Gets the id of this RescheduleEventBindingModel.  # noqa: E501


        :return: The id of this RescheduleEventBindingModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RescheduleEventBindingModel.


        :param id: The id of this RescheduleEventBindingModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def view(self):
        """Gets the view of this RescheduleEventBindingModel.  # noqa: E501


        :return: The view of this RescheduleEventBindingModel.  # noqa: E501
        :rtype: str
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this RescheduleEventBindingModel.


        :param view: The view of this RescheduleEventBindingModel.  # noqa: E501
        :type: str
        """

        self._view = view

    @property
    def resource_id(self):
        """Gets the resource_id of this RescheduleEventBindingModel.  # noqa: E501


        :return: The resource_id of this RescheduleEventBindingModel.  # noqa: E501
        :rtype: int
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this RescheduleEventBindingModel.


        :param resource_id: The resource_id of this RescheduleEventBindingModel.  # noqa: E501
        :type: int
        """

        self._resource_id = resource_id

    @property
    def start(self):
        """Gets the start of this RescheduleEventBindingModel.  # noqa: E501


        :return: The start of this RescheduleEventBindingModel.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this RescheduleEventBindingModel.


        :param start: The start of this RescheduleEventBindingModel.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this RescheduleEventBindingModel.  # noqa: E501


        :return: The end of this RescheduleEventBindingModel.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this RescheduleEventBindingModel.


        :param end: The end of this RescheduleEventBindingModel.  # noqa: E501
        :type: datetime
        """

        self._end = end

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RescheduleEventBindingModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RescheduleEventBindingModel):
            return True

        return self.to_dict() != other.to_dict()
