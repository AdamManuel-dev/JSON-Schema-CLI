# coding: utf-8

"""
    MarketSharp CRM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class MultiCompanyContactSearchResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ms_company': 'str',
        'coy_oid': 'str',
        'contact_type': 'str',
        'contact_type_display': 'str',
        'oid': 'str',
        'last_name': 'str',
        'first_name': 'str',
        'company': 'str',
        'primary_email': 'str',
        'secondary_email': 'str',
        'teritiary_email': 'str',
        'address_line_one': 'str',
        'address_line_two': 'str',
        'city': 'str',
        'state': 'str',
        'zip': 'str',
        'phone_numbers': 'list[str]',
        'can_access_contact_details': 'str'
    }

    attribute_map = {
        'ms_company': 'msCompany',
        'coy_oid': 'coyOid',
        'contact_type': 'contactType',
        'contact_type_display': 'contactTypeDisplay',
        'oid': 'oid',
        'last_name': 'lastName',
        'first_name': 'firstName',
        'company': 'company',
        'primary_email': 'primaryEmail',
        'secondary_email': 'secondaryEmail',
        'teritiary_email': 'teritiaryEmail',
        'address_line_one': 'addressLineOne',
        'address_line_two': 'addressLineTwo',
        'city': 'city',
        'state': 'state',
        'zip': 'zip',
        'phone_numbers': 'phoneNumbers',
        'can_access_contact_details': 'canAccessContactDetails'
    }

    def __init__(self, ms_company=None, coy_oid=None, contact_type=None, contact_type_display=None, oid=None, last_name=None, first_name=None, company=None, primary_email=None, secondary_email=None, teritiary_email=None, address_line_one=None, address_line_two=None, city=None, state=None, zip=None, phone_numbers=None, can_access_contact_details=None, local_vars_configuration=None):  # noqa: E501
        """MultiCompanyContactSearchResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ms_company = None
        self._coy_oid = None
        self._contact_type = None
        self._contact_type_display = None
        self._oid = None
        self._last_name = None
        self._first_name = None
        self._company = None
        self._primary_email = None
        self._secondary_email = None
        self._teritiary_email = None
        self._address_line_one = None
        self._address_line_two = None
        self._city = None
        self._state = None
        self._zip = None
        self._phone_numbers = None
        self._can_access_contact_details = None
        self.discriminator = None

        if ms_company is not None:
            self.ms_company = ms_company
        if coy_oid is not None:
            self.coy_oid = coy_oid
        if contact_type is not None:
            self.contact_type = contact_type
        if contact_type_display is not None:
            self.contact_type_display = contact_type_display
        if oid is not None:
            self.oid = oid
        if last_name is not None:
            self.last_name = last_name
        if first_name is not None:
            self.first_name = first_name
        if company is not None:
            self.company = company
        if primary_email is not None:
            self.primary_email = primary_email
        if secondary_email is not None:
            self.secondary_email = secondary_email
        if teritiary_email is not None:
            self.teritiary_email = teritiary_email
        if address_line_one is not None:
            self.address_line_one = address_line_one
        if address_line_two is not None:
            self.address_line_two = address_line_two
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        if zip is not None:
            self.zip = zip
        if phone_numbers is not None:
            self.phone_numbers = phone_numbers
        if can_access_contact_details is not None:
            self.can_access_contact_details = can_access_contact_details

    @property
    def ms_company(self):
        """Gets the ms_company of this MultiCompanyContactSearchResult.  # noqa: E501


        :return: The ms_company of this MultiCompanyContactSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._ms_company

    @ms_company.setter
    def ms_company(self, ms_company):
        """Sets the ms_company of this MultiCompanyContactSearchResult.


        :param ms_company: The ms_company of this MultiCompanyContactSearchResult.  # noqa: E501
        :type: str
        """

        self._ms_company = ms_company

    @property
    def coy_oid(self):
        """Gets the coy_oid of this MultiCompanyContactSearchResult.  # noqa: E501


        :return: The coy_oid of this MultiCompanyContactSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._coy_oid

    @coy_oid.setter
    def coy_oid(self, coy_oid):
        """Sets the coy_oid of this MultiCompanyContactSearchResult.


        :param coy_oid: The coy_oid of this MultiCompanyContactSearchResult.  # noqa: E501
        :type: str
        """

        self._coy_oid = coy_oid

    @property
    def contact_type(self):
        """Gets the contact_type of this MultiCompanyContactSearchResult.  # noqa: E501


        :return: The contact_type of this MultiCompanyContactSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._contact_type

    @contact_type.setter
    def contact_type(self, contact_type):
        """Sets the contact_type of this MultiCompanyContactSearchResult.


        :param contact_type: The contact_type of this MultiCompanyContactSearchResult.  # noqa: E501
        :type: str
        """

        self._contact_type = contact_type

    @property
    def contact_type_display(self):
        """Gets the contact_type_display of this MultiCompanyContactSearchResult.  # noqa: E501


        :return: The contact_type_display of this MultiCompanyContactSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._contact_type_display

    @contact_type_display.setter
    def contact_type_display(self, contact_type_display):
        """Sets the contact_type_display of this MultiCompanyContactSearchResult.


        :param contact_type_display: The contact_type_display of this MultiCompanyContactSearchResult.  # noqa: E501
        :type: str
        """

        self._contact_type_display = contact_type_display

    @property
    def oid(self):
        """Gets the oid of this MultiCompanyContactSearchResult.  # noqa: E501


        :return: The oid of this MultiCompanyContactSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._oid

    @oid.setter
    def oid(self, oid):
        """Sets the oid of this MultiCompanyContactSearchResult.


        :param oid: The oid of this MultiCompanyContactSearchResult.  # noqa: E501
        :type: str
        """

        self._oid = oid

    @property
    def last_name(self):
        """Gets the last_name of this MultiCompanyContactSearchResult.  # noqa: E501


        :return: The last_name of this MultiCompanyContactSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this MultiCompanyContactSearchResult.


        :param last_name: The last_name of this MultiCompanyContactSearchResult.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def first_name(self):
        """Gets the first_name of this MultiCompanyContactSearchResult.  # noqa: E501


        :return: The first_name of this MultiCompanyContactSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this MultiCompanyContactSearchResult.


        :param first_name: The first_name of this MultiCompanyContactSearchResult.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def company(self):
        """Gets the company of this MultiCompanyContactSearchResult.  # noqa: E501


        :return: The company of this MultiCompanyContactSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this MultiCompanyContactSearchResult.


        :param company: The company of this MultiCompanyContactSearchResult.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def primary_email(self):
        """Gets the primary_email of this MultiCompanyContactSearchResult.  # noqa: E501


        :return: The primary_email of this MultiCompanyContactSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._primary_email

    @primary_email.setter
    def primary_email(self, primary_email):
        """Sets the primary_email of this MultiCompanyContactSearchResult.


        :param primary_email: The primary_email of this MultiCompanyContactSearchResult.  # noqa: E501
        :type: str
        """

        self._primary_email = primary_email

    @property
    def secondary_email(self):
        """Gets the secondary_email of this MultiCompanyContactSearchResult.  # noqa: E501


        :return: The secondary_email of this MultiCompanyContactSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._secondary_email

    @secondary_email.setter
    def secondary_email(self, secondary_email):
        """Sets the secondary_email of this MultiCompanyContactSearchResult.


        :param secondary_email: The secondary_email of this MultiCompanyContactSearchResult.  # noqa: E501
        :type: str
        """

        self._secondary_email = secondary_email

    @property
    def teritiary_email(self):
        """Gets the teritiary_email of this MultiCompanyContactSearchResult.  # noqa: E501


        :return: The teritiary_email of this MultiCompanyContactSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._teritiary_email

    @teritiary_email.setter
    def teritiary_email(self, teritiary_email):
        """Sets the teritiary_email of this MultiCompanyContactSearchResult.


        :param teritiary_email: The teritiary_email of this MultiCompanyContactSearchResult.  # noqa: E501
        :type: str
        """

        self._teritiary_email = teritiary_email

    @property
    def address_line_one(self):
        """Gets the address_line_one of this MultiCompanyContactSearchResult.  # noqa: E501


        :return: The address_line_one of this MultiCompanyContactSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._address_line_one

    @address_line_one.setter
    def address_line_one(self, address_line_one):
        """Sets the address_line_one of this MultiCompanyContactSearchResult.


        :param address_line_one: The address_line_one of this MultiCompanyContactSearchResult.  # noqa: E501
        :type: str
        """

        self._address_line_one = address_line_one

    @property
    def address_line_two(self):
        """Gets the address_line_two of this MultiCompanyContactSearchResult.  # noqa: E501


        :return: The address_line_two of this MultiCompanyContactSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._address_line_two

    @address_line_two.setter
    def address_line_two(self, address_line_two):
        """Sets the address_line_two of this MultiCompanyContactSearchResult.


        :param address_line_two: The address_line_two of this MultiCompanyContactSearchResult.  # noqa: E501
        :type: str
        """

        self._address_line_two = address_line_two

    @property
    def city(self):
        """Gets the city of this MultiCompanyContactSearchResult.  # noqa: E501


        :return: The city of this MultiCompanyContactSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this MultiCompanyContactSearchResult.


        :param city: The city of this MultiCompanyContactSearchResult.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this MultiCompanyContactSearchResult.  # noqa: E501


        :return: The state of this MultiCompanyContactSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MultiCompanyContactSearchResult.


        :param state: The state of this MultiCompanyContactSearchResult.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def zip(self):
        """Gets the zip of this MultiCompanyContactSearchResult.  # noqa: E501


        :return: The zip of this MultiCompanyContactSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this MultiCompanyContactSearchResult.


        :param zip: The zip of this MultiCompanyContactSearchResult.  # noqa: E501
        :type: str
        """

        self._zip = zip

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this MultiCompanyContactSearchResult.  # noqa: E501


        :return: The phone_numbers of this MultiCompanyContactSearchResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this MultiCompanyContactSearchResult.


        :param phone_numbers: The phone_numbers of this MultiCompanyContactSearchResult.  # noqa: E501
        :type: list[str]
        """

        self._phone_numbers = phone_numbers

    @property
    def can_access_contact_details(self):
        """Gets the can_access_contact_details of this MultiCompanyContactSearchResult.  # noqa: E501


        :return: The can_access_contact_details of this MultiCompanyContactSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._can_access_contact_details

    @can_access_contact_details.setter
    def can_access_contact_details(self, can_access_contact_details):
        """Sets the can_access_contact_details of this MultiCompanyContactSearchResult.


        :param can_access_contact_details: The can_access_contact_details of this MultiCompanyContactSearchResult.  # noqa: E501
        :type: str
        """

        self._can_access_contact_details = can_access_contact_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MultiCompanyContactSearchResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MultiCompanyContactSearchResult):
            return True

        return self.to_dict() != other.to_dict()
