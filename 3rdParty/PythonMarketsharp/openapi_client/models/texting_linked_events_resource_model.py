# coding: utf-8

"""
    MarketSharp CRM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class TextingLinkedEventsResourceModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'inquiry_required': 'bool',
        'appointment_required': 'bool',
        'job_required': 'bool',
        'production_required': 'bool',
        'service_required': 'bool'
    }

    attribute_map = {
        'inquiry_required': 'inquiryRequired',
        'appointment_required': 'appointmentRequired',
        'job_required': 'jobRequired',
        'production_required': 'productionRequired',
        'service_required': 'serviceRequired'
    }

    def __init__(self, inquiry_required=None, appointment_required=None, job_required=None, production_required=None, service_required=None, local_vars_configuration=None):  # noqa: E501
        """TextingLinkedEventsResourceModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._inquiry_required = None
        self._appointment_required = None
        self._job_required = None
        self._production_required = None
        self._service_required = None
        self.discriminator = None

        if inquiry_required is not None:
            self.inquiry_required = inquiry_required
        if appointment_required is not None:
            self.appointment_required = appointment_required
        if job_required is not None:
            self.job_required = job_required
        if production_required is not None:
            self.production_required = production_required
        if service_required is not None:
            self.service_required = service_required

    @property
    def inquiry_required(self):
        """Gets the inquiry_required of this TextingLinkedEventsResourceModel.  # noqa: E501


        :return: The inquiry_required of this TextingLinkedEventsResourceModel.  # noqa: E501
        :rtype: bool
        """
        return self._inquiry_required

    @inquiry_required.setter
    def inquiry_required(self, inquiry_required):
        """Sets the inquiry_required of this TextingLinkedEventsResourceModel.


        :param inquiry_required: The inquiry_required of this TextingLinkedEventsResourceModel.  # noqa: E501
        :type: bool
        """

        self._inquiry_required = inquiry_required

    @property
    def appointment_required(self):
        """Gets the appointment_required of this TextingLinkedEventsResourceModel.  # noqa: E501


        :return: The appointment_required of this TextingLinkedEventsResourceModel.  # noqa: E501
        :rtype: bool
        """
        return self._appointment_required

    @appointment_required.setter
    def appointment_required(self, appointment_required):
        """Sets the appointment_required of this TextingLinkedEventsResourceModel.


        :param appointment_required: The appointment_required of this TextingLinkedEventsResourceModel.  # noqa: E501
        :type: bool
        """

        self._appointment_required = appointment_required

    @property
    def job_required(self):
        """Gets the job_required of this TextingLinkedEventsResourceModel.  # noqa: E501


        :return: The job_required of this TextingLinkedEventsResourceModel.  # noqa: E501
        :rtype: bool
        """
        return self._job_required

    @job_required.setter
    def job_required(self, job_required):
        """Sets the job_required of this TextingLinkedEventsResourceModel.


        :param job_required: The job_required of this TextingLinkedEventsResourceModel.  # noqa: E501
        :type: bool
        """

        self._job_required = job_required

    @property
    def production_required(self):
        """Gets the production_required of this TextingLinkedEventsResourceModel.  # noqa: E501


        :return: The production_required of this TextingLinkedEventsResourceModel.  # noqa: E501
        :rtype: bool
        """
        return self._production_required

    @production_required.setter
    def production_required(self, production_required):
        """Sets the production_required of this TextingLinkedEventsResourceModel.


        :param production_required: The production_required of this TextingLinkedEventsResourceModel.  # noqa: E501
        :type: bool
        """

        self._production_required = production_required

    @property
    def service_required(self):
        """Gets the service_required of this TextingLinkedEventsResourceModel.  # noqa: E501


        :return: The service_required of this TextingLinkedEventsResourceModel.  # noqa: E501
        :rtype: bool
        """
        return self._service_required

    @service_required.setter
    def service_required(self, service_required):
        """Sets the service_required of this TextingLinkedEventsResourceModel.


        :param service_required: The service_required of this TextingLinkedEventsResourceModel.  # noqa: E501
        :type: bool
        """

        self._service_required = service_required

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TextingLinkedEventsResourceModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TextingLinkedEventsResourceModel):
            return True

        return self.to_dict() != other.to_dict()
