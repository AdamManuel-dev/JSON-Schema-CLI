# coding: utf-8

"""
    MarketSharp CRM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ProductTypeDetailBindingModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'product_type_id': 'str',
        'is_active': 'bool',
        'product_details': 'list[ProductDetailBindingModel]'
    }

    attribute_map = {
        'product_type_id': 'productTypeId',
        'is_active': 'isActive',
        'product_details': 'productDetails'
    }

    def __init__(self, product_type_id=None, is_active=None, product_details=None, local_vars_configuration=None):  # noqa: E501
        """ProductTypeDetailBindingModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._product_type_id = None
        self._is_active = None
        self._product_details = None
        self.discriminator = None

        if product_type_id is not None:
            self.product_type_id = product_type_id
        if is_active is not None:
            self.is_active = is_active
        if product_details is not None:
            self.product_details = product_details

    @property
    def product_type_id(self):
        """Gets the product_type_id of this ProductTypeDetailBindingModel.  # noqa: E501

        Product type id.  # noqa: E501

        :return: The product_type_id of this ProductTypeDetailBindingModel.  # noqa: E501
        :rtype: str
        """
        return self._product_type_id

    @product_type_id.setter
    def product_type_id(self, product_type_id):
        """Sets the product_type_id of this ProductTypeDetailBindingModel.

        Product type id.  # noqa: E501

        :param product_type_id: The product_type_id of this ProductTypeDetailBindingModel.  # noqa: E501
        :type: str
        """

        self._product_type_id = product_type_id

    @property
    def is_active(self):
        """Gets the is_active of this ProductTypeDetailBindingModel.  # noqa: E501

        Returns a value of true if the record in the database is active.  # noqa: E501

        :return: The is_active of this ProductTypeDetailBindingModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this ProductTypeDetailBindingModel.

        Returns a value of true if the record in the database is active.  # noqa: E501

        :param is_active: The is_active of this ProductTypeDetailBindingModel.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def product_details(self):
        """Gets the product_details of this ProductTypeDetailBindingModel.  # noqa: E501

        IEnumerable list of simple product detail binding models.  # noqa: E501

        :return: The product_details of this ProductTypeDetailBindingModel.  # noqa: E501
        :rtype: list[ProductDetailBindingModel]
        """
        return self._product_details

    @product_details.setter
    def product_details(self, product_details):
        """Sets the product_details of this ProductTypeDetailBindingModel.

        IEnumerable list of simple product detail binding models.  # noqa: E501

        :param product_details: The product_details of this ProductTypeDetailBindingModel.  # noqa: E501
        :type: list[ProductDetailBindingModel]
        """

        self._product_details = product_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductTypeDetailBindingModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProductTypeDetailBindingModel):
            return True

        return self.to_dict() != other.to_dict()
