# coding: utf-8

"""
    MarketSharp CRM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ResourcesResourceModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'color': 'str',
        'work_crew': 'int',
        'service_crew': 'int',
        'salesperson': 'int',
        'production': 'int',
        'employee': 'int',
        'equipment': 'int',
        'other_resource': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'color': 'color',
        'work_crew': 'workCrew',
        'service_crew': 'serviceCrew',
        'salesperson': 'salesperson',
        'production': 'production',
        'employee': 'employee',
        'equipment': 'equipment',
        'other_resource': 'otherResource'
    }

    def __init__(self, id=None, name=None, color=None, work_crew=None, service_crew=None, salesperson=None, production=None, employee=None, equipment=None, other_resource=None, local_vars_configuration=None):  # noqa: E501
        """ResourcesResourceModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._color = None
        self._work_crew = None
        self._service_crew = None
        self._salesperson = None
        self._production = None
        self._employee = None
        self._equipment = None
        self._other_resource = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if color is not None:
            self.color = color
        if work_crew is not None:
            self.work_crew = work_crew
        if service_crew is not None:
            self.service_crew = service_crew
        if salesperson is not None:
            self.salesperson = salesperson
        if production is not None:
            self.production = production
        if employee is not None:
            self.employee = employee
        if equipment is not None:
            self.equipment = equipment
        if other_resource is not None:
            self.other_resource = other_resource

    @property
    def id(self):
        """Gets the id of this ResourcesResourceModel.  # noqa: E501


        :return: The id of this ResourcesResourceModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResourcesResourceModel.


        :param id: The id of this ResourcesResourceModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ResourcesResourceModel.  # noqa: E501


        :return: The name of this ResourcesResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResourcesResourceModel.


        :param name: The name of this ResourcesResourceModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def color(self):
        """Gets the color of this ResourcesResourceModel.  # noqa: E501


        :return: The color of this ResourcesResourceModel.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this ResourcesResourceModel.


        :param color: The color of this ResourcesResourceModel.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def work_crew(self):
        """Gets the work_crew of this ResourcesResourceModel.  # noqa: E501


        :return: The work_crew of this ResourcesResourceModel.  # noqa: E501
        :rtype: int
        """
        return self._work_crew

    @work_crew.setter
    def work_crew(self, work_crew):
        """Sets the work_crew of this ResourcesResourceModel.


        :param work_crew: The work_crew of this ResourcesResourceModel.  # noqa: E501
        :type: int
        """

        self._work_crew = work_crew

    @property
    def service_crew(self):
        """Gets the service_crew of this ResourcesResourceModel.  # noqa: E501


        :return: The service_crew of this ResourcesResourceModel.  # noqa: E501
        :rtype: int
        """
        return self._service_crew

    @service_crew.setter
    def service_crew(self, service_crew):
        """Sets the service_crew of this ResourcesResourceModel.


        :param service_crew: The service_crew of this ResourcesResourceModel.  # noqa: E501
        :type: int
        """

        self._service_crew = service_crew

    @property
    def salesperson(self):
        """Gets the salesperson of this ResourcesResourceModel.  # noqa: E501


        :return: The salesperson of this ResourcesResourceModel.  # noqa: E501
        :rtype: int
        """
        return self._salesperson

    @salesperson.setter
    def salesperson(self, salesperson):
        """Sets the salesperson of this ResourcesResourceModel.


        :param salesperson: The salesperson of this ResourcesResourceModel.  # noqa: E501
        :type: int
        """

        self._salesperson = salesperson

    @property
    def production(self):
        """Gets the production of this ResourcesResourceModel.  # noqa: E501


        :return: The production of this ResourcesResourceModel.  # noqa: E501
        :rtype: int
        """
        return self._production

    @production.setter
    def production(self, production):
        """Sets the production of this ResourcesResourceModel.


        :param production: The production of this ResourcesResourceModel.  # noqa: E501
        :type: int
        """

        self._production = production

    @property
    def employee(self):
        """Gets the employee of this ResourcesResourceModel.  # noqa: E501


        :return: The employee of this ResourcesResourceModel.  # noqa: E501
        :rtype: int
        """
        return self._employee

    @employee.setter
    def employee(self, employee):
        """Sets the employee of this ResourcesResourceModel.


        :param employee: The employee of this ResourcesResourceModel.  # noqa: E501
        :type: int
        """

        self._employee = employee

    @property
    def equipment(self):
        """Gets the equipment of this ResourcesResourceModel.  # noqa: E501


        :return: The equipment of this ResourcesResourceModel.  # noqa: E501
        :rtype: int
        """
        return self._equipment

    @equipment.setter
    def equipment(self, equipment):
        """Sets the equipment of this ResourcesResourceModel.


        :param equipment: The equipment of this ResourcesResourceModel.  # noqa: E501
        :type: int
        """

        self._equipment = equipment

    @property
    def other_resource(self):
        """Gets the other_resource of this ResourcesResourceModel.  # noqa: E501


        :return: The other_resource of this ResourcesResourceModel.  # noqa: E501
        :rtype: int
        """
        return self._other_resource

    @other_resource.setter
    def other_resource(self, other_resource):
        """Sets the other_resource of this ResourcesResourceModel.


        :param other_resource: The other_resource of this ResourcesResourceModel.  # noqa: E501
        :type: int
        """

        self._other_resource = other_resource

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourcesResourceModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResourcesResourceModel):
            return True

        return self.to_dict() != other.to_dict()
