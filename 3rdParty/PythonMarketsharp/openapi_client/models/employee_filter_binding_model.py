# coding: utf-8

"""
    MarketSharp CRM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class EmployeeFilterBindingModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'has_phone': 'bool',
        'has_email': 'bool',
        'include_inactive': 'bool',
        'employee_list_types': 'list[str]',
        'include_employees': 'list[str]'
    }

    attribute_map = {
        'has_phone': 'hasPhone',
        'has_email': 'hasEmail',
        'include_inactive': 'includeInactive',
        'employee_list_types': 'employeeListTypes',
        'include_employees': 'includeEmployees'
    }

    def __init__(self, has_phone=None, has_email=None, include_inactive=None, employee_list_types=None, include_employees=None, local_vars_configuration=None):  # noqa: E501
        """EmployeeFilterBindingModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._has_phone = None
        self._has_email = None
        self._include_inactive = None
        self._employee_list_types = None
        self._include_employees = None
        self.discriminator = None

        if has_phone is not None:
            self.has_phone = has_phone
        if has_email is not None:
            self.has_email = has_email
        if include_inactive is not None:
            self.include_inactive = include_inactive
        if employee_list_types is not None:
            self.employee_list_types = employee_list_types
        if include_employees is not None:
            self.include_employees = include_employees

    @property
    def has_phone(self):
        """Gets the has_phone of this EmployeeFilterBindingModel.  # noqa: E501


        :return: The has_phone of this EmployeeFilterBindingModel.  # noqa: E501
        :rtype: bool
        """
        return self._has_phone

    @has_phone.setter
    def has_phone(self, has_phone):
        """Sets the has_phone of this EmployeeFilterBindingModel.


        :param has_phone: The has_phone of this EmployeeFilterBindingModel.  # noqa: E501
        :type: bool
        """

        self._has_phone = has_phone

    @property
    def has_email(self):
        """Gets the has_email of this EmployeeFilterBindingModel.  # noqa: E501


        :return: The has_email of this EmployeeFilterBindingModel.  # noqa: E501
        :rtype: bool
        """
        return self._has_email

    @has_email.setter
    def has_email(self, has_email):
        """Sets the has_email of this EmployeeFilterBindingModel.


        :param has_email: The has_email of this EmployeeFilterBindingModel.  # noqa: E501
        :type: bool
        """

        self._has_email = has_email

    @property
    def include_inactive(self):
        """Gets the include_inactive of this EmployeeFilterBindingModel.  # noqa: E501


        :return: The include_inactive of this EmployeeFilterBindingModel.  # noqa: E501
        :rtype: bool
        """
        return self._include_inactive

    @include_inactive.setter
    def include_inactive(self, include_inactive):
        """Sets the include_inactive of this EmployeeFilterBindingModel.


        :param include_inactive: The include_inactive of this EmployeeFilterBindingModel.  # noqa: E501
        :type: bool
        """

        self._include_inactive = include_inactive

    @property
    def employee_list_types(self):
        """Gets the employee_list_types of this EmployeeFilterBindingModel.  # noqa: E501

        A list of employeeList types. The permission for an employee to appear in various drop down lists. ex: All, Salesperson, AppointmentSetBy...  # noqa: E501

        :return: The employee_list_types of this EmployeeFilterBindingModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._employee_list_types

    @employee_list_types.setter
    def employee_list_types(self, employee_list_types):
        """Sets the employee_list_types of this EmployeeFilterBindingModel.

        A list of employeeList types. The permission for an employee to appear in various drop down lists. ex: All, Salesperson, AppointmentSetBy...  # noqa: E501

        :param employee_list_types: The employee_list_types of this EmployeeFilterBindingModel.  # noqa: E501
        :type: list[str]
        """

        self._employee_list_types = employee_list_types

    @property
    def include_employees(self):
        """Gets the include_employees of this EmployeeFilterBindingModel.  # noqa: E501

        A list of employee id to include in the search results. A good usecase for this can be to include the assigned employee in the search results.  # noqa: E501

        :return: The include_employees of this EmployeeFilterBindingModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._include_employees

    @include_employees.setter
    def include_employees(self, include_employees):
        """Sets the include_employees of this EmployeeFilterBindingModel.

        A list of employee id to include in the search results. A good usecase for this can be to include the assigned employee in the search results.  # noqa: E501

        :param include_employees: The include_employees of this EmployeeFilterBindingModel.  # noqa: E501
        :type: list[str]
        """

        self._include_employees = include_employees

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmployeeFilterBindingModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EmployeeFilterBindingModel):
            return True

        return self.to_dict() != other.to_dict()
