# coding: utf-8

"""
    MarketSharp CRM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class AuthenticationApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def token_post(self, grant_type, apikey, **kwargs):  # noqa: E501
        """Retrieve a token  # noqa: E501

        There are two ways to authenticate with this API. Application Authentication and Employee Authentication. <br />You need credentials provided by Marketsharp in order to authenticate with this API <br /><br />Application Authentication can be used access more than one Marketsharp company with the same set of credentials. <br />Employee Authentication uses your Marketsharp login credentials to authenticate to the api. Therefore, you would need to know login credentals to every marketsharp company you need access to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.token_post(grant_type, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str grant_type: Set to password (required)
        :param str apikey: Provided by MarketSharp (required)
        :param str company_id: Your Marketsharp Company Id. Provide when authenticating. Takes precedence over company_id
        :param str apisecret: Provide only if you authenticating as an application.
        :param str empoid: Provide only if you authenticating as an application.
        :param str company_id: Provide only if you authenticating as an employee. This parameter is deprecated and will be removed in the future. Please use companyId instead
        :param str username: Provide only if you authenticating as an employee.
        :param str password: Provide only if you authenticating as an employee.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.token_post_with_http_info(grant_type, apikey, **kwargs)  # noqa: E501

    def token_post_with_http_info(self, grant_type, apikey, **kwargs):  # noqa: E501
        """Retrieve a token  # noqa: E501

        There are two ways to authenticate with this API. Application Authentication and Employee Authentication. <br />You need credentials provided by Marketsharp in order to authenticate with this API <br /><br />Application Authentication can be used access more than one Marketsharp company with the same set of credentials. <br />Employee Authentication uses your Marketsharp login credentials to authenticate to the api. Therefore, you would need to know login credentals to every marketsharp company you need access to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.token_post_with_http_info(grant_type, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str grant_type: Set to password (required)
        :param str apikey: Provided by MarketSharp (required)
        :param str company_id: Your Marketsharp Company Id. Provide when authenticating. Takes precedence over company_id
        :param str apisecret: Provide only if you authenticating as an application.
        :param str empoid: Provide only if you authenticating as an application.
        :param str company_id: Provide only if you authenticating as an employee. This parameter is deprecated and will be removed in the future. Please use companyId instead
        :param str username: Provide only if you authenticating as an employee.
        :param str password: Provide only if you authenticating as an employee.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'grant_type',
            'apikey',
            'company_id',
            'apisecret',
            'empoid',
            'company_id',
            'username',
            'password'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method token_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'grant_type' is set
        if self.api_client.client_side_validation and ('grant_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['grant_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `grant_type` when calling `token_post`")  # noqa: E501
        # verify the required parameter 'apikey' is set
        if self.api_client.client_side_validation and ('apikey' not in local_var_params or  # noqa: E501
                                                        local_var_params['apikey'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `apikey` when calling `token_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'grant_type' in local_var_params:
            form_params.append(('grant_type', local_var_params['grant_type']))  # noqa: E501
        if 'company_id' in local_var_params:
            form_params.append(('companyId', local_var_params['company_id']))  # noqa: E501
        if 'apikey' in local_var_params:
            form_params.append(('apikey', local_var_params['apikey']))  # noqa: E501
        if 'apisecret' in local_var_params:
            form_params.append(('apisecret', local_var_params['apisecret']))  # noqa: E501
        if 'empoid' in local_var_params:
            form_params.append(('empoid', local_var_params['empoid']))  # noqa: E501
        if 'company_id' in local_var_params:
            form_params.append(('company_id', local_var_params['company_id']))  # noqa: E501
        if 'username' in local_var_params:
            form_params.append(('username', local_var_params['username']))  # noqa: E501
        if 'password' in local_var_params:
            form_params.append(('password', local_var_params['password']))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/token', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
