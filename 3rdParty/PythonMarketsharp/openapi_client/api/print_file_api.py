# coding: utf-8

"""
    MarketSharp CRM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class PrintFileApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def print_file_create_get_work_orders(self, companyid, work_order_binding, **kwargs):  # noqa: E501
        """Creates a string url to open the print file shim to create a work order  # noqa: E501

        This creates a string that is used as a url to create a new work order through the print file shim  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_file_create_get_work_orders(companyid, work_order_binding, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str companyid: (required)
        :param PrintFileBindingModel work_order_binding: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.print_file_create_get_work_orders_with_http_info(companyid, work_order_binding, **kwargs)  # noqa: E501

    def print_file_create_get_work_orders_with_http_info(self, companyid, work_order_binding, **kwargs):  # noqa: E501
        """Creates a string url to open the print file shim to create a work order  # noqa: E501

        This creates a string that is used as a url to create a new work order through the print file shim  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_file_create_get_work_orders_with_http_info(companyid, work_order_binding, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str companyid: (required)
        :param PrintFileBindingModel work_order_binding: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'companyid',
            'work_order_binding'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method print_file_create_get_work_orders" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'companyid' is set
        if self.api_client.client_side_validation and ('companyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['companyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `companyid` when calling `print_file_create_get_work_orders`")  # noqa: E501
        # verify the required parameter 'work_order_binding' is set
        if self.api_client.client_side_validation and ('work_order_binding' not in local_var_params or  # noqa: E501
                                                        local_var_params['work_order_binding'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `work_order_binding` when calling `print_file_create_get_work_orders`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'companyid' in local_var_params:
            path_params['companyid'] = local_var_params['companyid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'work_order_binding' in local_var_params:
            body_params = local_var_params['work_order_binding']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/companies/{companyid}/printfile/workorder', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def print_file_delete_work_orders(self, process_type_step_oid, companyid, **kwargs):  # noqa: E501
        """This will delete the work order by the processTypeStepOid  # noqa: E501

        This will return a boolean whether the print file as been deleted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_file_delete_work_orders(process_type_step_oid, companyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str process_type_step_oid: (required)
        :param str companyid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.print_file_delete_work_orders_with_http_info(process_type_step_oid, companyid, **kwargs)  # noqa: E501

    def print_file_delete_work_orders_with_http_info(self, process_type_step_oid, companyid, **kwargs):  # noqa: E501
        """This will delete the work order by the processTypeStepOid  # noqa: E501

        This will return a boolean whether the print file as been deleted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_file_delete_work_orders_with_http_info(process_type_step_oid, companyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str process_type_step_oid: (required)
        :param str companyid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(bool, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'process_type_step_oid',
            'companyid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method print_file_delete_work_orders" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'process_type_step_oid' is set
        if self.api_client.client_side_validation and ('process_type_step_oid' not in local_var_params or  # noqa: E501
                                                        local_var_params['process_type_step_oid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `process_type_step_oid` when calling `print_file_delete_work_orders`")  # noqa: E501
        # verify the required parameter 'companyid' is set
        if self.api_client.client_side_validation and ('companyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['companyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `companyid` when calling `print_file_delete_work_orders`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'process_type_step_oid' in local_var_params:
            path_params['processTypeStepOid'] = local_var_params['process_type_step_oid']  # noqa: E501
        if 'companyid' in local_var_params:
            path_params['companyid'] = local_var_params['companyid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/companies/{companyid}/printfile/workorder/{processTypeStepOid}/delete', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def print_file_get_work_order_by_id(self, process_type_step_oid, companyid, **kwargs):  # noqa: E501
        """Checks if a work order exists  # noqa: E501

        Returns a boolean whether the work order exists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_file_get_work_order_by_id(process_type_step_oid, companyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str process_type_step_oid: (required)
        :param str companyid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PrintFileExistsBindingModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.print_file_get_work_order_by_id_with_http_info(process_type_step_oid, companyid, **kwargs)  # noqa: E501

    def print_file_get_work_order_by_id_with_http_info(self, process_type_step_oid, companyid, **kwargs):  # noqa: E501
        """Checks if a work order exists  # noqa: E501

        Returns a boolean whether the work order exists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_file_get_work_order_by_id_with_http_info(process_type_step_oid, companyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str process_type_step_oid: (required)
        :param str companyid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PrintFileExistsBindingModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'process_type_step_oid',
            'companyid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method print_file_get_work_order_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'process_type_step_oid' is set
        if self.api_client.client_side_validation and ('process_type_step_oid' not in local_var_params or  # noqa: E501
                                                        local_var_params['process_type_step_oid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `process_type_step_oid` when calling `print_file_get_work_order_by_id`")  # noqa: E501
        # verify the required parameter 'companyid' is set
        if self.api_client.client_side_validation and ('companyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['companyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `companyid` when calling `print_file_get_work_order_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'process_type_step_oid' in local_var_params:
            path_params['processTypeStepOid'] = local_var_params['process_type_step_oid']  # noqa: E501
        if 'companyid' in local_var_params:
            path_params['companyid'] = local_var_params['companyid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/companies/{companyid}/printfile/workorder/{processTypeStepOid}/exists', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrintFileExistsBindingModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def print_file_get_work_order_templates(self, companyid, **kwargs):  # noqa: E501
        """Gets the available work order templates  # noqa: E501

        Returns a key value pair of work order templates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_file_get_work_order_templates(companyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str companyid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: KeyValueResourceModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.print_file_get_work_order_templates_with_http_info(companyid, **kwargs)  # noqa: E501

    def print_file_get_work_order_templates_with_http_info(self, companyid, **kwargs):  # noqa: E501
        """Gets the available work order templates  # noqa: E501

        Returns a key value pair of work order templates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_file_get_work_order_templates_with_http_info(companyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str companyid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(KeyValueResourceModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'companyid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method print_file_get_work_order_templates" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'companyid' is set
        if self.api_client.client_side_validation and ('companyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['companyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `companyid` when calling `print_file_get_work_order_templates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'companyid' in local_var_params:
            path_params['companyid'] = local_var_params['companyid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/companies/{companyid}/printfile/workorder/templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KeyValueResourceModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def print_file_get_work_orders(self, process_type_step_oid, companyid, **kwargs):  # noqa: E501
        """Opens the existing work order for editing  # noqa: E501

        This creates a string that is used as a url to edit a new work order through the print file shim  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_file_get_work_orders(process_type_step_oid, companyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str process_type_step_oid: (required)
        :param str companyid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.print_file_get_work_orders_with_http_info(process_type_step_oid, companyid, **kwargs)  # noqa: E501

    def print_file_get_work_orders_with_http_info(self, process_type_step_oid, companyid, **kwargs):  # noqa: E501
        """Opens the existing work order for editing  # noqa: E501

        This creates a string that is used as a url to edit a new work order through the print file shim  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.print_file_get_work_orders_with_http_info(process_type_step_oid, companyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str process_type_step_oid: (required)
        :param str companyid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'process_type_step_oid',
            'companyid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method print_file_get_work_orders" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'process_type_step_oid' is set
        if self.api_client.client_side_validation and ('process_type_step_oid' not in local_var_params or  # noqa: E501
                                                        local_var_params['process_type_step_oid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `process_type_step_oid` when calling `print_file_get_work_orders`")  # noqa: E501
        # verify the required parameter 'companyid' is set
        if self.api_client.client_side_validation and ('companyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['companyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `companyid` when calling `print_file_get_work_orders`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'process_type_step_oid' in local_var_params:
            path_params['processTypeStepOid'] = local_var_params['process_type_step_oid']  # noqa: E501
        if 'companyid' in local_var_params:
            path_params['companyid'] = local_var_params['companyid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/companies/{companyid}/printfile/workorder/{processTypeStepOid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
