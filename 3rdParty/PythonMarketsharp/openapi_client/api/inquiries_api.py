# coding: utf-8

"""
    MarketSharp CRM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class InquiriesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def inquiries_delete_opportunity_note(self, note_id, inquiry_id, company_id, **kwargs):  # noqa: E501
        """Delete opportunity note.  # noqa: E501

        Deletes the opportunity note based on the note id and inquiry id passed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inquiries_delete_opportunity_note(note_id, inquiry_id, company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int note_id: Id of the note to be deleted. (required)
        :param str inquiry_id: Id of the inquiry that the note is associated with. (required)
        :param str company_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.inquiries_delete_opportunity_note_with_http_info(note_id, inquiry_id, company_id, **kwargs)  # noqa: E501

    def inquiries_delete_opportunity_note_with_http_info(self, note_id, inquiry_id, company_id, **kwargs):  # noqa: E501
        """Delete opportunity note.  # noqa: E501

        Deletes the opportunity note based on the note id and inquiry id passed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inquiries_delete_opportunity_note_with_http_info(note_id, inquiry_id, company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int note_id: Id of the note to be deleted. (required)
        :param str inquiry_id: Id of the inquiry that the note is associated with. (required)
        :param str company_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'note_id',
            'inquiry_id',
            'company_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inquiries_delete_opportunity_note" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'note_id' is set
        if self.api_client.client_side_validation and ('note_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['note_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `note_id` when calling `inquiries_delete_opportunity_note`")  # noqa: E501
        # verify the required parameter 'inquiry_id' is set
        if self.api_client.client_side_validation and ('inquiry_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['inquiry_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `inquiry_id` when calling `inquiries_delete_opportunity_note`")  # noqa: E501
        # verify the required parameter 'company_id' is set
        if self.api_client.client_side_validation and ('company_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['company_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `company_id` when calling `inquiries_delete_opportunity_note`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'note_id' in local_var_params:
            path_params['noteId'] = local_var_params['note_id']  # noqa: E501
        if 'inquiry_id' in local_var_params:
            path_params['inquiryId'] = local_var_params['inquiry_id']  # noqa: E501
        if 'company_id' in local_var_params:
            path_params['companyId'] = local_var_params['company_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/companies/{companyId}/opportunities/{inquiryId}/notes/{noteId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inquiries_filter_inquiries(self, company_id, query, **kwargs):  # noqa: E501
        """Filter for inquiries  # noqa: E501

        filter parameters are optional  <br />pageNumber and rowsPerPage default to 1st page and 1000 inquiries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inquiries_filter_inquiries(company_id, query, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str company_id: (required)
        :param InquiriesBindingModel query: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[InquiryResourceModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.inquiries_filter_inquiries_with_http_info(company_id, query, **kwargs)  # noqa: E501

    def inquiries_filter_inquiries_with_http_info(self, company_id, query, **kwargs):  # noqa: E501
        """Filter for inquiries  # noqa: E501

        filter parameters are optional  <br />pageNumber and rowsPerPage default to 1st page and 1000 inquiries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inquiries_filter_inquiries_with_http_info(company_id, query, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str company_id: (required)
        :param InquiriesBindingModel query: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[InquiryResourceModel], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'company_id',
            'query'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inquiries_filter_inquiries" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'company_id' is set
        if self.api_client.client_side_validation and ('company_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['company_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `company_id` when calling `inquiries_filter_inquiries`")  # noqa: E501
        # verify the required parameter 'query' is set
        if self.api_client.client_side_validation and ('query' not in local_var_params or  # noqa: E501
                                                        local_var_params['query'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `query` when calling `inquiries_filter_inquiries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'company_id' in local_var_params:
            path_params['companyId'] = local_var_params['company_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'query' in local_var_params:
            body_params = local_var_params['query']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/companies/{companyId}/inquiries/filter', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InquiryResourceModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inquiries_get_inquiry(self, inquiry_id, **kwargs):  # noqa: E501
        """Retrieve an inquiry - Deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inquiries_get_inquiry(inquiry_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str inquiry_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.inquiries_get_inquiry_with_http_info(inquiry_id, **kwargs)  # noqa: E501

    def inquiries_get_inquiry_with_http_info(self, inquiry_id, **kwargs):  # noqa: E501
        """Retrieve an inquiry - Deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inquiries_get_inquiry_with_http_info(inquiry_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str inquiry_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'inquiry_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inquiries_get_inquiry" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'inquiry_id' is set
        if self.api_client.client_side_validation and ('inquiry_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['inquiry_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `inquiry_id` when calling `inquiries_get_inquiry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'inquiry_id' in local_var_params:
            path_params['inquiryId'] = local_var_params['inquiry_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/inquiries/{inquiryId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inquiries_get_inquiry_by_id(self, inquiry_id, company_id, **kwargs):  # noqa: E501
        """Retrieve an inquiry by Id  # noqa: E501

        Return a single inquiry by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inquiries_get_inquiry_by_id(inquiry_id, company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str inquiry_id: (required)
        :param str company_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[InquiryResourceModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.inquiries_get_inquiry_by_id_with_http_info(inquiry_id, company_id, **kwargs)  # noqa: E501

    def inquiries_get_inquiry_by_id_with_http_info(self, inquiry_id, company_id, **kwargs):  # noqa: E501
        """Retrieve an inquiry by Id  # noqa: E501

        Return a single inquiry by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inquiries_get_inquiry_by_id_with_http_info(inquiry_id, company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str inquiry_id: (required)
        :param str company_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[InquiryResourceModel], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'inquiry_id',
            'company_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inquiries_get_inquiry_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'inquiry_id' is set
        if self.api_client.client_side_validation and ('inquiry_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['inquiry_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `inquiry_id` when calling `inquiries_get_inquiry_by_id`")  # noqa: E501
        # verify the required parameter 'company_id' is set
        if self.api_client.client_side_validation and ('company_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['company_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `company_id` when calling `inquiries_get_inquiry_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'inquiry_id' in local_var_params:
            path_params['inquiryId'] = local_var_params['inquiry_id']  # noqa: E501
        if 'company_id' in local_var_params:
            path_params['companyId'] = local_var_params['company_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/companies/{companyId}/inquiries/{inquiryId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InquiryResourceModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inquiries_get_inquiry_job_address(self, inquiry_id, job_id, company_id, **kwargs):  # noqa: E501
        """Get inquiry or job address.  # noqa: E501

        Gets either the inquiry or job address.    If a job id is passed in addition to the inquiry id then the job address will be grabbed.    If only an inquiry id is passed then the inquiry address is grabbed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inquiries_get_inquiry_job_address(inquiry_id, job_id, company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str inquiry_id: Inquiry Id. (required)
        :param str job_id: Job id. Optional. (required)
        :param str company_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AddressResourceModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.inquiries_get_inquiry_job_address_with_http_info(inquiry_id, job_id, company_id, **kwargs)  # noqa: E501

    def inquiries_get_inquiry_job_address_with_http_info(self, inquiry_id, job_id, company_id, **kwargs):  # noqa: E501
        """Get inquiry or job address.  # noqa: E501

        Gets either the inquiry or job address.    If a job id is passed in addition to the inquiry id then the job address will be grabbed.    If only an inquiry id is passed then the inquiry address is grabbed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inquiries_get_inquiry_job_address_with_http_info(inquiry_id, job_id, company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str inquiry_id: Inquiry Id. (required)
        :param str job_id: Job id. Optional. (required)
        :param str company_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AddressResourceModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'inquiry_id',
            'job_id',
            'company_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inquiries_get_inquiry_job_address" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'inquiry_id' is set
        if self.api_client.client_side_validation and ('inquiry_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['inquiry_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `inquiry_id` when calling `inquiries_get_inquiry_job_address`")  # noqa: E501
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['job_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `job_id` when calling `inquiries_get_inquiry_job_address`")  # noqa: E501
        # verify the required parameter 'company_id' is set
        if self.api_client.client_side_validation and ('company_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['company_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `company_id` when calling `inquiries_get_inquiry_job_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'inquiry_id' in local_var_params:
            path_params['inquiryId'] = local_var_params['inquiry_id']  # noqa: E501
        if 'job_id' in local_var_params:
            path_params['jobId'] = local_var_params['job_id']  # noqa: E501
        if 'company_id' in local_var_params:
            path_params['companyId'] = local_var_params['company_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/companies/{companyId}/opportunities/address/{inquiryId}/{jobId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddressResourceModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inquiries_get_opportunity(self, inquiry_id, company_id, **kwargs):  # noqa: E501
        """Get Opportunity By Id  # noqa: E501

        This is an inquiry combined with a job. The jobsite address comes from the job if specified. JobId is optional  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inquiries_get_opportunity(inquiry_id, company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str inquiry_id: (required)
        :param str company_id: (required)
        :param str job_id:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: OpportunityResourceModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.inquiries_get_opportunity_with_http_info(inquiry_id, company_id, **kwargs)  # noqa: E501

    def inquiries_get_opportunity_with_http_info(self, inquiry_id, company_id, **kwargs):  # noqa: E501
        """Get Opportunity By Id  # noqa: E501

        This is an inquiry combined with a job. The jobsite address comes from the job if specified. JobId is optional  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inquiries_get_opportunity_with_http_info(inquiry_id, company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str inquiry_id: (required)
        :param str company_id: (required)
        :param str job_id:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(OpportunityResourceModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'inquiry_id',
            'company_id',
            'job_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inquiries_get_opportunity" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'inquiry_id' is set
        if self.api_client.client_side_validation and ('inquiry_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['inquiry_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `inquiry_id` when calling `inquiries_get_opportunity`")  # noqa: E501
        # verify the required parameter 'company_id' is set
        if self.api_client.client_side_validation and ('company_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['company_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `company_id` when calling `inquiries_get_opportunity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'inquiry_id' in local_var_params:
            path_params['inquiryId'] = local_var_params['inquiry_id']  # noqa: E501
        if 'company_id' in local_var_params:
            path_params['companyId'] = local_var_params['company_id']  # noqa: E501

        query_params = []
        if 'job_id' in local_var_params and local_var_params['job_id'] is not None:  # noqa: E501
            query_params.append(('jobId', local_var_params['job_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/companies/{companyId}/opportunities/{inquiryId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OpportunityResourceModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inquiries_get_opportunity_note(self, inquiry_id, opportunity_note_id, company_id, **kwargs):  # noqa: E501
        """Get opportunity note.  # noqa: E501

        Retrieves a single note based on the information passed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inquiries_get_opportunity_note(inquiry_id, opportunity_note_id, company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str inquiry_id: Inquiry Id. (required)
        :param int opportunity_note_id: Id of the note. (required)
        :param str company_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: OpportunityNoteResourceModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.inquiries_get_opportunity_note_with_http_info(inquiry_id, opportunity_note_id, company_id, **kwargs)  # noqa: E501

    def inquiries_get_opportunity_note_with_http_info(self, inquiry_id, opportunity_note_id, company_id, **kwargs):  # noqa: E501
        """Get opportunity note.  # noqa: E501

        Retrieves a single note based on the information passed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inquiries_get_opportunity_note_with_http_info(inquiry_id, opportunity_note_id, company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str inquiry_id: Inquiry Id. (required)
        :param int opportunity_note_id: Id of the note. (required)
        :param str company_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(OpportunityNoteResourceModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'inquiry_id',
            'opportunity_note_id',
            'company_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inquiries_get_opportunity_note" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'inquiry_id' is set
        if self.api_client.client_side_validation and ('inquiry_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['inquiry_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `inquiry_id` when calling `inquiries_get_opportunity_note`")  # noqa: E501
        # verify the required parameter 'opportunity_note_id' is set
        if self.api_client.client_side_validation and ('opportunity_note_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['opportunity_note_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `opportunity_note_id` when calling `inquiries_get_opportunity_note`")  # noqa: E501
        # verify the required parameter 'company_id' is set
        if self.api_client.client_side_validation and ('company_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['company_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `company_id` when calling `inquiries_get_opportunity_note`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'inquiry_id' in local_var_params:
            path_params['inquiryId'] = local_var_params['inquiry_id']  # noqa: E501
        if 'opportunity_note_id' in local_var_params:
            path_params['opportunityNoteId'] = local_var_params['opportunity_note_id']  # noqa: E501
        if 'company_id' in local_var_params:
            path_params['companyId'] = local_var_params['company_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/companies/{companyId}/opportunities/{inquiryId}/note/{opportunityNoteId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OpportunityNoteResourceModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inquiries_get_opportunity_notes(self, inquiry_id, note_type, company_id, **kwargs):  # noqa: E501
        """Get opportunity notes.  # noqa: E501

        Retrieves all notes for a lead based on the type of note passed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inquiries_get_opportunity_notes(inquiry_id, note_type, company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str inquiry_id: Inquiry Id. (required)
        :param int note_type: Type of note. Inquiry notes = 1 and Job notes = 2. (required)
        :param str company_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[OpportunityNoteResourceModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.inquiries_get_opportunity_notes_with_http_info(inquiry_id, note_type, company_id, **kwargs)  # noqa: E501

    def inquiries_get_opportunity_notes_with_http_info(self, inquiry_id, note_type, company_id, **kwargs):  # noqa: E501
        """Get opportunity notes.  # noqa: E501

        Retrieves all notes for a lead based on the type of note passed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inquiries_get_opportunity_notes_with_http_info(inquiry_id, note_type, company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str inquiry_id: Inquiry Id. (required)
        :param int note_type: Type of note. Inquiry notes = 1 and Job notes = 2. (required)
        :param str company_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[OpportunityNoteResourceModel], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'inquiry_id',
            'note_type',
            'company_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inquiries_get_opportunity_notes" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'inquiry_id' is set
        if self.api_client.client_side_validation and ('inquiry_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['inquiry_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `inquiry_id` when calling `inquiries_get_opportunity_notes`")  # noqa: E501
        # verify the required parameter 'note_type' is set
        if self.api_client.client_side_validation and ('note_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['note_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `note_type` when calling `inquiries_get_opportunity_notes`")  # noqa: E501
        # verify the required parameter 'company_id' is set
        if self.api_client.client_side_validation and ('company_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['company_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `company_id` when calling `inquiries_get_opportunity_notes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'inquiry_id' in local_var_params:
            path_params['inquiryId'] = local_var_params['inquiry_id']  # noqa: E501
        if 'note_type' in local_var_params:
            path_params['noteType'] = local_var_params['note_type']  # noqa: E501
        if 'company_id' in local_var_params:
            path_params['companyId'] = local_var_params['company_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/companies/{companyId}/opportunities/{inquiryId}/notes/{noteType}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OpportunityNoteResourceModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inquiries_get_opportunity_or_job_name(self, inquiry_id, job_id, company_id, **kwargs):  # noqa: E501
        """Get Opportunity Name by Id  # noqa: E501

        Retrieves the Opportunity name by Inquiry or Job Id. If Job Id is specified, then Job Name is returned. If only Inquiry Id is specified, then Opportunity Name is returned  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inquiries_get_opportunity_or_job_name(inquiry_id, job_id, company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str inquiry_id: Inquiry Id (required)
        :param str job_id: Job Id. Optional. (required)
        :param str company_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.inquiries_get_opportunity_or_job_name_with_http_info(inquiry_id, job_id, company_id, **kwargs)  # noqa: E501

    def inquiries_get_opportunity_or_job_name_with_http_info(self, inquiry_id, job_id, company_id, **kwargs):  # noqa: E501
        """Get Opportunity Name by Id  # noqa: E501

        Retrieves the Opportunity name by Inquiry or Job Id. If Job Id is specified, then Job Name is returned. If only Inquiry Id is specified, then Opportunity Name is returned  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inquiries_get_opportunity_or_job_name_with_http_info(inquiry_id, job_id, company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str inquiry_id: Inquiry Id (required)
        :param str job_id: Job Id. Optional. (required)
        :param str company_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'inquiry_id',
            'job_id',
            'company_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inquiries_get_opportunity_or_job_name" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'inquiry_id' is set
        if self.api_client.client_side_validation and ('inquiry_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['inquiry_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `inquiry_id` when calling `inquiries_get_opportunity_or_job_name`")  # noqa: E501
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['job_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `job_id` when calling `inquiries_get_opportunity_or_job_name`")  # noqa: E501
        # verify the required parameter 'company_id' is set
        if self.api_client.client_side_validation and ('company_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['company_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `company_id` when calling `inquiries_get_opportunity_or_job_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'inquiry_id' in local_var_params:
            path_params['inquiryId'] = local_var_params['inquiry_id']  # noqa: E501
        if 'job_id' in local_var_params:
            path_params['jobId'] = local_var_params['job_id']  # noqa: E501
        if 'company_id' in local_var_params:
            path_params['companyId'] = local_var_params['company_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/companies/{companyId}/opportunities/name/{inquiryId}/{jobId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inquiries_save_opportunity_notes(self, company_id, opportunity_note_to_save, **kwargs):  # noqa: E501
        """Save opportunity notes.  # noqa: E501

        Saves the opportunity note record.  If a note id is passed then the existing note will be updated.  If the note id is omitted then a new record will be inserted. The save will return the updated opportunity note record.<br /><br />   Request:<br />   { <br />    \"id\": 1, // Optional. Id of the note. Pass the Id of the note to update an existing note.  Omit the note id to insert a new note record.<br />    \"inquiryId\": \"BC0607CC-CB12-48BD-AE27-95848710BF24\", // Required. Id of the inquiry that the note is being saved to.<br />    \"note\": \"Sample note text.\", // Required. Note text. <br />    \"opportunityNoteType\": 1 // Optional. Required for insert and ignored when updating. Opportunity note type. Inquiry = 1. Job = 2.  <br /> }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inquiries_save_opportunity_notes(company_id, opportunity_note_to_save, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str company_id: (required)
        :param OpportunityNoteBindingModel opportunity_note_to_save: Model containing opportunity note information to be saved. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: OpportunityNoteResourceModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.inquiries_save_opportunity_notes_with_http_info(company_id, opportunity_note_to_save, **kwargs)  # noqa: E501

    def inquiries_save_opportunity_notes_with_http_info(self, company_id, opportunity_note_to_save, **kwargs):  # noqa: E501
        """Save opportunity notes.  # noqa: E501

        Saves the opportunity note record.  If a note id is passed then the existing note will be updated.  If the note id is omitted then a new record will be inserted. The save will return the updated opportunity note record.<br /><br />   Request:<br />   { <br />    \"id\": 1, // Optional. Id of the note. Pass the Id of the note to update an existing note.  Omit the note id to insert a new note record.<br />    \"inquiryId\": \"BC0607CC-CB12-48BD-AE27-95848710BF24\", // Required. Id of the inquiry that the note is being saved to.<br />    \"note\": \"Sample note text.\", // Required. Note text. <br />    \"opportunityNoteType\": 1 // Optional. Required for insert and ignored when updating. Opportunity note type. Inquiry = 1. Job = 2.  <br /> }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inquiries_save_opportunity_notes_with_http_info(company_id, opportunity_note_to_save, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str company_id: (required)
        :param OpportunityNoteBindingModel opportunity_note_to_save: Model containing opportunity note information to be saved. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(OpportunityNoteResourceModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'company_id',
            'opportunity_note_to_save'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inquiries_save_opportunity_notes" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'company_id' is set
        if self.api_client.client_side_validation and ('company_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['company_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `company_id` when calling `inquiries_save_opportunity_notes`")  # noqa: E501
        # verify the required parameter 'opportunity_note_to_save' is set
        if self.api_client.client_side_validation and ('opportunity_note_to_save' not in local_var_params or  # noqa: E501
                                                        local_var_params['opportunity_note_to_save'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `opportunity_note_to_save` when calling `inquiries_save_opportunity_notes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'company_id' in local_var_params:
            path_params['companyId'] = local_var_params['company_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'opportunity_note_to_save' in local_var_params:
            body_params = local_var_params['opportunity_note_to_save']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/companies/{companyId}/opportunities/notes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OpportunityNoteResourceModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inquiries_search_inquiries(self, companyid, inquiry, **kwargs):  # noqa: E501
        """Search for inquiries  # noqa: E501

        QuickFind - Inquiry Search. Find inquiries with permissions by checking employee id in the bearer token.              <br /><br /> Employee Id in the bearer token is required  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inquiries_search_inquiries(companyid, inquiry, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str companyid: (required)
        :param InquirySearchBindingModel inquiry: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[InquirySearchResult]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.inquiries_search_inquiries_with_http_info(companyid, inquiry, **kwargs)  # noqa: E501

    def inquiries_search_inquiries_with_http_info(self, companyid, inquiry, **kwargs):  # noqa: E501
        """Search for inquiries  # noqa: E501

        QuickFind - Inquiry Search. Find inquiries with permissions by checking employee id in the bearer token.              <br /><br /> Employee Id in the bearer token is required  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inquiries_search_inquiries_with_http_info(companyid, inquiry, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str companyid: (required)
        :param InquirySearchBindingModel inquiry: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[InquirySearchResult], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'companyid',
            'inquiry'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inquiries_search_inquiries" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'companyid' is set
        if self.api_client.client_side_validation and ('companyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['companyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `companyid` when calling `inquiries_search_inquiries`")  # noqa: E501
        # verify the required parameter 'inquiry' is set
        if self.api_client.client_side_validation and ('inquiry' not in local_var_params or  # noqa: E501
                                                        local_var_params['inquiry'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `inquiry` when calling `inquiries_search_inquiries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'companyid' in local_var_params:
            path_params['companyid'] = local_var_params['companyid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'inquiry' in local_var_params:
            body_params = local_var_params['inquiry']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/companies/{companyid}/inquiries/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InquirySearchResult]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inquiries_search_inquiries_0(self, inquiry, **kwargs):  # noqa: E501
        """Search for inquiries  # noqa: E501

        Search inquiries across all companies in marketsharp database with employee permissions.              This uses the employeeId in the bearer token.              In order to access all the databases, the employee must be shared down from the parent down to the child.              <br /><br />companyId parameter looks to accept a comma delimited list of company id: eg 3,2,1              <br /><br /> Employee Id in the bearer token is required  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inquiries_search_inquiries_0(inquiry, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InquirySearchBindingModel inquiry: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[MultiCompanyInquirySearchResult]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.inquiries_search_inquiries_0_with_http_info(inquiry, **kwargs)  # noqa: E501

    def inquiries_search_inquiries_0_with_http_info(self, inquiry, **kwargs):  # noqa: E501
        """Search for inquiries  # noqa: E501

        Search inquiries across all companies in marketsharp database with employee permissions.              This uses the employeeId in the bearer token.              In order to access all the databases, the employee must be shared down from the parent down to the child.              <br /><br />companyId parameter looks to accept a comma delimited list of company id: eg 3,2,1              <br /><br /> Employee Id in the bearer token is required  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inquiries_search_inquiries_0_with_http_info(inquiry, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InquirySearchBindingModel inquiry: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[MultiCompanyInquirySearchResult], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'inquiry'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inquiries_search_inquiries_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'inquiry' is set
        if self.api_client.client_side_validation and ('inquiry' not in local_var_params or  # noqa: E501
                                                        local_var_params['inquiry'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `inquiry` when calling `inquiries_search_inquiries_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'inquiry' in local_var_params:
            body_params = local_var_params['inquiry']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/inquiries/search2', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MultiCompanyInquirySearchResult]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inquiries_search_inquiries_1(self, query, **kwargs):  # noqa: E501
        """Filter for inquiries - Deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inquiries_search_inquiries_1(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InquiriesBindingModel query: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.inquiries_search_inquiries_1_with_http_info(query, **kwargs)  # noqa: E501

    def inquiries_search_inquiries_1_with_http_info(self, query, **kwargs):  # noqa: E501
        """Filter for inquiries - Deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inquiries_search_inquiries_1_with_http_info(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param InquiriesBindingModel query: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'query'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inquiries_search_inquiries_1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'query' is set
        if self.api_client.client_side_validation and ('query' not in local_var_params or  # noqa: E501
                                                        local_var_params['query'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `query` when calling `inquiries_search_inquiries_1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'query' in local_var_params:
            body_params = local_var_params['query']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/inquiries/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inquiries_update_inquiry_job_address(self, company_id, inquiry_id, job_id, address_to_update, **kwargs):  # noqa: E501
        """Update inquiry or job address.  # noqa: E501

        Updates either the inquiry or job address.  If a job id is passed in addition to the inquiry id then the job address will be updated.  If only an inquiry id is passed then the inquiry address is updated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inquiries_update_inquiry_job_address(company_id, inquiry_id, job_id, address_to_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str company_id: Database company id. (required)
        :param str inquiry_id: Inquiry Id. (required)
        :param str job_id: Job id. Optional. (required)
        :param AddressBindingModel address_to_update: Model containing address information to be updated. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.inquiries_update_inquiry_job_address_with_http_info(company_id, inquiry_id, job_id, address_to_update, **kwargs)  # noqa: E501

    def inquiries_update_inquiry_job_address_with_http_info(self, company_id, inquiry_id, job_id, address_to_update, **kwargs):  # noqa: E501
        """Update inquiry or job address.  # noqa: E501

        Updates either the inquiry or job address.  If a job id is passed in addition to the inquiry id then the job address will be updated.  If only an inquiry id is passed then the inquiry address is updated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inquiries_update_inquiry_job_address_with_http_info(company_id, inquiry_id, job_id, address_to_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str company_id: Database company id. (required)
        :param str inquiry_id: Inquiry Id. (required)
        :param str job_id: Job id. Optional. (required)
        :param AddressBindingModel address_to_update: Model containing address information to be updated. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'company_id',
            'inquiry_id',
            'job_id',
            'address_to_update'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inquiries_update_inquiry_job_address" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'company_id' is set
        if self.api_client.client_side_validation and ('company_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['company_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `company_id` when calling `inquiries_update_inquiry_job_address`")  # noqa: E501
        # verify the required parameter 'inquiry_id' is set
        if self.api_client.client_side_validation and ('inquiry_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['inquiry_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `inquiry_id` when calling `inquiries_update_inquiry_job_address`")  # noqa: E501
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['job_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `job_id` when calling `inquiries_update_inquiry_job_address`")  # noqa: E501
        # verify the required parameter 'address_to_update' is set
        if self.api_client.client_side_validation and ('address_to_update' not in local_var_params or  # noqa: E501
                                                        local_var_params['address_to_update'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `address_to_update` when calling `inquiries_update_inquiry_job_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'company_id' in local_var_params:
            path_params['companyId'] = local_var_params['company_id']  # noqa: E501
        if 'inquiry_id' in local_var_params:
            path_params['inquiryId'] = local_var_params['inquiry_id']  # noqa: E501
        if 'job_id' in local_var_params:
            path_params['jobId'] = local_var_params['job_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'address_to_update' in local_var_params:
            body_params = local_var_params['address_to_update']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/companies/{companyId}/opportunities/address/{inquiryId}/{jobId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inquiries_update_inquiry_qualification(self, inquiry_id, company_id, **kwargs):  # noqa: E501
        """Qualify an Inquiry/Opportunity  # noqa: E501

        Qualifies an Inquiry/Opportunity. Sets the Qualified_By and Qualified_Date_Utc fields on the Lead table.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inquiries_update_inquiry_qualification(inquiry_id, company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str inquiry_id: (required)
        :param str company_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.inquiries_update_inquiry_qualification_with_http_info(inquiry_id, company_id, **kwargs)  # noqa: E501

    def inquiries_update_inquiry_qualification_with_http_info(self, inquiry_id, company_id, **kwargs):  # noqa: E501
        """Qualify an Inquiry/Opportunity  # noqa: E501

        Qualifies an Inquiry/Opportunity. Sets the Qualified_By and Qualified_Date_Utc fields on the Lead table.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inquiries_update_inquiry_qualification_with_http_info(inquiry_id, company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str inquiry_id: (required)
        :param str company_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'inquiry_id',
            'company_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inquiries_update_inquiry_qualification" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'inquiry_id' is set
        if self.api_client.client_side_validation and ('inquiry_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['inquiry_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `inquiry_id` when calling `inquiries_update_inquiry_qualification`")  # noqa: E501
        # verify the required parameter 'company_id' is set
        if self.api_client.client_side_validation and ('company_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['company_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `company_id` when calling `inquiries_update_inquiry_qualification`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'inquiry_id' in local_var_params:
            path_params['inquiryId'] = local_var_params['inquiry_id']  # noqa: E501
        if 'company_id' in local_var_params:
            path_params['companyId'] = local_var_params['company_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/companies/{companyId}/opportunities/qualification/{inquiryId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inquiries_update_opportunity_or_job_name(self, company_id, inquiry_id, job_id, name_to_be_updated, **kwargs):  # noqa: E501
        """Update opportunity or job name.  # noqa: E501

        Updates either the opportunity or job name. If a job id is passed in addition to the inquiry id the the job name will be updated. If only an inquiry id is passed then the opportunity name is updated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inquiries_update_opportunity_or_job_name(company_id, inquiry_id, job_id, name_to_be_updated, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str company_id: Database company id. (required)
        :param str inquiry_id: Inquiry Id. (required)
        :param str job_id: Job id. Optional. (required)
        :param SimpleOpportunityBindingModel name_to_be_updated: Model containing name to be updated to. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.inquiries_update_opportunity_or_job_name_with_http_info(company_id, inquiry_id, job_id, name_to_be_updated, **kwargs)  # noqa: E501

    def inquiries_update_opportunity_or_job_name_with_http_info(self, company_id, inquiry_id, job_id, name_to_be_updated, **kwargs):  # noqa: E501
        """Update opportunity or job name.  # noqa: E501

        Updates either the opportunity or job name. If a job id is passed in addition to the inquiry id the the job name will be updated. If only an inquiry id is passed then the opportunity name is updated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inquiries_update_opportunity_or_job_name_with_http_info(company_id, inquiry_id, job_id, name_to_be_updated, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str company_id: Database company id. (required)
        :param str inquiry_id: Inquiry Id. (required)
        :param str job_id: Job id. Optional. (required)
        :param SimpleOpportunityBindingModel name_to_be_updated: Model containing name to be updated to. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'company_id',
            'inquiry_id',
            'job_id',
            'name_to_be_updated'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inquiries_update_opportunity_or_job_name" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'company_id' is set
        if self.api_client.client_side_validation and ('company_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['company_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `company_id` when calling `inquiries_update_opportunity_or_job_name`")  # noqa: E501
        # verify the required parameter 'inquiry_id' is set
        if self.api_client.client_side_validation and ('inquiry_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['inquiry_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `inquiry_id` when calling `inquiries_update_opportunity_or_job_name`")  # noqa: E501
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['job_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `job_id` when calling `inquiries_update_opportunity_or_job_name`")  # noqa: E501
        # verify the required parameter 'name_to_be_updated' is set
        if self.api_client.client_side_validation and ('name_to_be_updated' not in local_var_params or  # noqa: E501
                                                        local_var_params['name_to_be_updated'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `name_to_be_updated` when calling `inquiries_update_opportunity_or_job_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'company_id' in local_var_params:
            path_params['companyId'] = local_var_params['company_id']  # noqa: E501
        if 'inquiry_id' in local_var_params:
            path_params['inquiryId'] = local_var_params['inquiry_id']  # noqa: E501
        if 'job_id' in local_var_params:
            path_params['jobId'] = local_var_params['job_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'name_to_be_updated' in local_var_params:
            body_params = local_var_params['name_to_be_updated']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/companies/{companyId}/opportunities/name/{inquiryId}/{jobId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
